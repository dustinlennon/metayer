% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cli_wrapped.R
\name{cli_progress_update}
\alias{cli_progress_update}
\title{Wrapped version of cli::cli_progress_update}
\usage{
cli_progress_update(
  inc = NULL,
  set = NULL,
  total = NULL,
  status = NULL,
  extra = NULL,
  id = NULL,
  force = FALSE,
  .envir = parent.frame()
)
}
\arguments{
\item{inc}{Increment in progress units. This is ignored if \code{set} is
not \code{NULL}.}

\item{set}{Set the current number of progress units to this value.
Ignored if \code{NULL}.}

\item{total}{Total number of progress units, or \code{NA} if it is unknown.
\code{cli_progress_update()} can update the total number of units. This is
handy if you don't know the size of a download at the beginning, and
also in some other cases. If \code{format} is set to \code{NULL}, \code{format} (plus
\code{format_done} and \code{format_failed}) will be updated when you change
\code{total} from \code{NA} to a number. I.e. default format strings will be
updated, custom ones won't be.}

\item{status}{New status string of the progress bar, if not \code{NULL}.}

\item{extra}{Extra data to add to the progress bar. This can be
used in custom format strings for example. It should be a named list.
\code{cli_progress_update()} can update the extra data. Often you can get
away with referring to local variables in the format string, and
then you don't need to use this argument. Explicitly including these
constants or variables in \code{extra} can result in cleaner code. In
the rare cases when you need to refer to the same progress bar from
multiple functions, and you can them to \code{extra}.}

\item{id}{Progress bar to update or terminate. If \code{NULL}, then the
current progress bar of the calling function (or \code{.envir} if
specified) is updated or terminated.}

\item{force}{Whether to force a display update, even if no update is
due.}

\item{.envir}{The environment to use for auto-termination and for glue
substitution. It is also used to find and set the current progress bar.}
}
\value{
\code{cli_progress_bar()} returns the id of the new progress bar.
The id is a string constant.

\code{cli_progress_update()} returns the id of the progress bar,
invisibly.

\code{cli_progress_done()} returns \code{TRUE}, invisibly, always.
}
\description{
This is the reference manual of the three functions that create,
update and terminate progress bars. For a tutorial see the
\href{https://cli.r-lib.org/articles/progress.html}{cli progress bars}.

\code{cli_progress_bar()} creates a new progress bar.

\code{cli_progress_update()} updates the state of a progress bar, and
potentially the display as well.

\code{cli_progress_done()} terminates a progress bar.
}
