% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cli_wrapped.R
\name{cli_abort}
\alias{cli_abort}
\alias{cli_alert}
\alias{cli_alert_danger}
\alias{cli_alert_info}
\alias{cli_alert_success}
\alias{cli_alert_warning}
\alias{cli_blockquote}
\alias{cli_bullets}
\alias{cli_bullets_raw}
\alias{cli_code}
\alias{cli_div}
\alias{cli_dl}
\alias{cli_end}
\alias{cli_format}
\alias{cli_format_method}
\alias{cli_h1}
\alias{cli_h2}
\alias{cli_h3}
\alias{cli_inform}
\alias{cli_li}
\alias{cli_list_themes}
\alias{cli_ol}
\alias{cli_output_connection}
\alias{cli_par}
\alias{cli_process_done}
\alias{cli_process_failed}
\alias{cli_process_start}
\alias{cli_progress_along}
\alias{cli_progress_bar}
\alias{cli_progress_builtin_handlers}
\alias{cli_progress_cleanup}
\alias{cli_progress_demo}
\alias{cli_progress_done}
\alias{cli_progress_message}
\alias{cli_progress_num}
\alias{cli_progress_output}
\alias{cli_progress_step}
\alias{cli_progress_styles}
\alias{cli_progress_update}
\alias{cli_rule}
\alias{cli_sitrep}
\alias{cli_status}
\alias{cli_status_clear}
\alias{cli_status_update}
\alias{cli_text}
\alias{cli_tick_reset}
\alias{cli_ul}
\alias{cli_vec}
\alias{cli_verbatim}
\alias{cli_warn}
\title{wrapped cli functions}
\usage{
cli_abort(
  message,
  ...,
  call = .envir,
  .envir = parent.frame(),
  .frame = .envir
)

cli_alert(text, id = NULL, class = NULL, wrap = FALSE, .envir = parent.frame())

cli_alert_danger(
  text,
  id = NULL,
  class = NULL,
  wrap = FALSE,
  .envir = parent.frame()
)

cli_alert_info(
  text,
  id = NULL,
  class = NULL,
  wrap = FALSE,
  .envir = parent.frame()
)

cli_alert_success(
  text,
  id = NULL,
  class = NULL,
  wrap = FALSE,
  .envir = parent.frame()
)

cli_alert_warning(
  text,
  id = NULL,
  class = NULL,
  wrap = FALSE,
  .envir = parent.frame()
)

cli_blockquote(
  quote,
  citation = NULL,
  id = NULL,
  class = NULL,
  .envir = parent.frame()
)

cli_bullets(text, id = NULL, class = NULL, .envir = parent.frame())

cli_bullets_raw(text, id = NULL, class = NULL)

cli_code(
  lines = NULL,
  ...,
  language = "R",
  .auto_close = TRUE,
  .envir = environment()
)

cli_div(
  id = NULL,
  class = NULL,
  theme = NULL,
  .auto_close = TRUE,
  .envir = parent.frame()
)

cli_dl(
  items = NULL,
  labels = names(items),
  id = NULL,
  class = NULL,
  .close = TRUE,
  .auto_close = TRUE,
  .envir = parent.frame()
)

cli_end(id = NULL)

cli_format(x, style = NULL, ...)

cli_format_method(expr, theme = getOption("cli.theme"))

cli_h1(text, id = NULL, class = NULL, .envir = parent.frame())

cli_h2(text, id = NULL, class = NULL, .envir = parent.frame())

cli_h3(text, id = NULL, class = NULL, .envir = parent.frame())

cli_inform(message, ..., .envir = parent.frame())

cli_li(
  items = NULL,
  labels = names(items),
  id = NULL,
  class = NULL,
  .auto_close = TRUE,
  .envir = parent.frame()
)

cli_list_themes()

cli_ol(
  items = NULL,
  id = NULL,
  class = NULL,
  .close = TRUE,
  .auto_close = TRUE,
  .envir = parent.frame()
)

cli_output_connection()

cli_par(id = NULL, class = NULL, .auto_close = TRUE, .envir = parent.frame())

cli_process_done(
  id = NULL,
  msg_done = NULL,
  .envir = parent.frame(),
  done_class = "alert-success"
)

cli_process_failed(
  id = NULL,
  msg = NULL,
  msg_failed = NULL,
  .envir = parent.frame(),
  failed_class = "alert-danger"
)

cli_process_start(
  msg,
  msg_done = paste(msg, "... done"),
  msg_failed = paste(msg, "... failed"),
  on_exit = c("auto", "failed", "done"),
  msg_class = "alert-info",
  done_class = "alert-success",
  failed_class = "alert-danger",
  .auto_close = TRUE,
  .envir = parent.frame()
)

cli_progress_along(
  x,
  name = NULL,
  total = length(x),
  ...,
  .envir = parent.frame()
)

cli_progress_bar(
  name = NULL,
  status = NULL,
  type = c("iterator", "tasks", "download", "custom"),
  total = NA,
  format = NULL,
  format_done = NULL,
  format_failed = NULL,
  clear = getOption("cli.progress_clear", TRUE),
  current = TRUE,
  auto_terminate = type != "download",
  extra = NULL,
  .auto_close = TRUE,
  .envir = parent.frame()
)

cli_progress_builtin_handlers()

cli_progress_cleanup()

cli_progress_demo(
  name = NULL,
  status = NULL,
  type = c("iterator", "tasks", "download", "custom"),
  total = NA,
  .envir = parent.frame(),
  ...,
  at = if (is_interactive()) NULL else 50,
  show_after = 0,
  live = NULL,
  delay = 0,
  start = as.difftime(5, units = "secs")
)

cli_progress_done(id = NULL, .envir = parent.frame(), result = "done")

cli_progress_message(
  msg,
  current = TRUE,
  .auto_close = TRUE,
  .envir = parent.frame(),
  ...
)

cli_progress_num()

cli_progress_output(text, id = NULL, .envir = parent.frame())

cli_progress_step(
  msg,
  msg_done = msg,
  msg_failed = msg,
  spinner = FALSE,
  class = if (!spinner) ".alert-info",
  current = TRUE,
  .auto_close = TRUE,
  .envir = parent.frame(),
  ...
)

cli_progress_styles()

cli_progress_update(
  inc = NULL,
  set = NULL,
  total = NULL,
  status = NULL,
  extra = NULL,
  id = NULL,
  force = FALSE,
  .envir = parent.frame()
)

cli_rule(
  left = "",
  center = "",
  right = "",
  id = NULL,
  .envir = parent.frame()
)

cli_sitrep()

cli_status(
  msg,
  msg_done = paste(msg, "... done"),
  msg_failed = paste(msg, "... failed"),
  .keep = FALSE,
  .auto_close = TRUE,
  .envir = parent.frame(),
  .auto_result = c("clear", "done", "failed", "auto")
)

cli_status_clear(
  id = NULL,
  result = c("clear", "done", "failed"),
  msg_done = NULL,
  msg_failed = NULL,
  .envir = parent.frame()
)

cli_status_update(
  id = NULL,
  msg = NULL,
  msg_done = NULL,
  msg_failed = NULL,
  .envir = parent.frame()
)

cli_text(..., .envir = parent.frame())

cli_tick_reset()

cli_ul(
  items = NULL,
  id = NULL,
  class = NULL,
  .close = TRUE,
  .auto_close = TRUE,
  .envir = parent.frame()
)

cli_vec(x, style = list())

cli_verbatim(..., .envir = parent.frame())

cli_warn(message, ..., .envir = parent.frame())
}
\description{
These functions are wrapped versions of those in the \href{https://cli.r-lib.org/index.html}{cli} package.
This allows us to inject logging metadata into the usual code flow.
}
