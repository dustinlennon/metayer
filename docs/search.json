[{"path":"http://localhost/BUILD.html","id":null,"dir":"","previous_headings":"","what":"Build notes","title":"Build notes","text":"helpful notes building various components.","code":""},{"path":"http://localhost/BUILD.html","id":"pkgdown","dir":"","previous_headings":"","what":"pkgdown","title":"Build notes","text":"","code":"pkgdown::build_site() pkgdown::build_articles() workflow(); pkgdown::build_article(\"ansi_issue\", lazy = FALSE, quiet = FALSE, new_process = FALSE) workflow(); pkgdown::build_article(\"authoring\")"},{"path":"http://localhost/BUILD.html","id":"single-notebook","dir":"","previous_headings":"pkgdown","what":"single notebook","title":"Build notes","text":"","code":"convert_ipynb(\"vignette/examples.ipynb\") pkgdown::build_article(\"examples\", lazy = FALSE, quiet = FALSE, new_process = FALSE)"},{"path":"http://localhost/BUILD.html","id":"metayer","dir":"","previous_headings":"","what":"metayer","title":"Build notes","text":"","code":"R CMD build . VERSION=0.2.4 \\ R CMD check metayer_${VERSION}.tar.gz"},{"path":"http://localhost/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 metayer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://localhost/articles/authoring.html","id":"publishing-context","dir":"Articles","previous_headings":"","what":"publishing context","title":"authoring","text":"article addresses publishing context. workflow scenario authoring documentation Jupyter notebook. requirement support rmarkdown html, rmarkdown pdf, pkgdown article output. Details document pipelines appendix.","code":""},{"path":"http://localhost/articles/authoring.html","id":"jupyter-header-yaml","dir":"Articles","previous_headings":"publishing context","what":"jupyter header yaml","title":"authoring","text":"can convenient copy paste new jupyter documents:","code":"--- title: \"authoring\"  all_doc: &shared   pandoc_args:      - !with_env \"--resource-path={R_HERE_HERE}/vignettes\"  output:   html_document:     <<: *shared     theme: cerulean     highlight: espresso   pdf_document:     <<: *shared ---"},{"path":"http://localhost/articles/authoring.html","id":"with_pander","dir":"Articles","previous_headings":"","what":"with_pander","title":"authoring","text":"pander converts markdown. with_pander adds logging context dependent output.","code":"# convert to markdown, with a message pander({   message(\"hello, stderr\")   pcd }) ## hello, stderr # publishing contextualized upgrade! with_pander({   message(\"hello, stderr.  hello, log.\")   pcd }) ## [INFO/metayer] hello, stderr.  hello, log. ## hello, stderr.  hello, log."},{"path":"http://localhost/articles/authoring.html","id":"sure_plot","dir":"Articles","previous_headings":"","what":"sure_plot","title":"authoring","text":"with_pander can used plots. generates image file injecting markdown link. default image format PNG, fine HTML, isn’t ideal PDF output.  PDF screen grab illustrates image scaling artifacts.  sure_plot addresses concern via publishing context.  corresponding screen grab PDF.","code":"# generate a PNG file with_pander({   plot(pcd$x, pcd$y) }) # Produce a context aware plot sure_plot(   {     plot(pcd$x, pcd$y)   },   height = 5,   width = 5,   res = 96,   par_opts = list(bg = \"azure\") )"},{"path":[]},{"path":"http://localhost/articles/authoring.html","id":"publishing-formats","dir":"Articles","previous_headings":"appendix","what":"publishing formats","title":"authoring","text":"snippet builds three output formats:","code":"article_name <- \"authoring\" ipynb_in <- here::here(\"vignettes\", glue(\"{article_name}.ipynb\"))  rmd_out <- fs::path_ext_set(ipynb_in, \".Rmd\") rmd_out <- pub_ipynb_to_rmd(ipynb_in, rmd_out)  # build html and pdf as per the jupyter YAML header knitr_set_config() rmarkdown::render(   input = rmd_out,   output_format = \"all\" )  # build the pkgdown article pkgdown::build_article(\"authoring\")"},{"path":"http://localhost/articles/authoring.html","id":"incremental-results","dir":"Articles","previous_headings":"appendix","what":"incremental results","title":"authoring","text":"can also build just Rmarkdown file. can processed knitr obtain regular markdown file, latter intermediary step . However, advice , markdown stage, image format established final output format . offer following (knitr_set_config) adjust output format sure_plot meet downstream needs:","code":"article_base <- here::here(\"vignettes/authoring\") ipynb <- fs::path_ext_set(article_base, \".ipynb\") rmd <- fs::path_ext_set(article_base, \".Rmd\") md <- fs::path_ext_set(article_base, \".md\")  pub_ipynb_to_rmd(ipynb, rmd) %>%   knitr::knit(md) # set the knitr configuration to enable 'jpeg' output from sure_plot knitr_set_config(dev = \"jpeg\") knitr::knit(rmd, md)"},{"path":"http://localhost/articles/hierarchical_storage.html","id":"globally-available-storage","dir":"Articles","previous_headings":"","what":"globally available storage","title":"hierarchical storage","text":"","code":"# This will create a '.storage' container in the global environment rm.all() local({   order_id = \"D1234\"   order <- storage_env(\"metayer\", \"menu\", \"dinner\", order_id)   order$chicken = TRUE   typeof(order)      all_orders <- storage_env(\"metayer\", \"menu\", \"dinner\")   all_orders[[order_id]] %>%     as.list() }) ## $chicken ## [1] TRUE # N.B., 'workflow' is a development artifact ls(all.names = TRUE) ## [1] \".storage\" \"workflow\" # access the order directly .storage$metayer$menu$dinner$D1234 %>%   as.list() ## $chicken ## [1] TRUE # access the order through the api storage_env(\"metayer\", \"menu\", \"dinner\")$D1234 %>%   as.list() ## $chicken ## [1] TRUE"},{"path":"http://localhost/articles/hierarchical_storage.html","id":"locally-scoped-storage","dir":"Articles","previous_headings":"","what":"locally scoped storage","title":"hierarchical storage","text":"’s worth noting storage doesn’t live global namespace.","code":"# This will create a 'lunch' container in the local environment rm.all() local({   order <- storage_env(\"metayer\", \"menu\", \"lunch\", \"L0222\", .store = \"lunch\", .envir = current_env())   order$burger = TRUE      # display a list of defined objects   ls(all.names = TRUE) %>%     capture.output() %>%     cli_verbatim()    lunch$metayer$menu$lunch$L0222 %>%     as.list() }) ## [INFO/global] [1] \"lunch\" \"order\" ## [1] \"lunch\" \"order\" ## $burger ## [1] TRUE # N.B., 'workflow' is a development artifact ls(all.names = TRUE) ## [1] \".storage\" \"workflow\""},{"path":"http://localhost/articles/metaprogramming.html","id":"wrapped_factory","dir":"Articles","previous_headings":"","what":"wrapped_factory","title":"metaprogramming","text":"’s easier start wrapped_factory. allows us rewrite existing functions. replicates function signature provides mechanism calling original function. example illustrative. wrapper must signature function(cmd, args, ...) ... may replaced key value arguments passed factory function. Now, produce new function using original function wrapper. ’s instructive inspect structure dbg_orig. function signature original function body wrapper. Moreover, cmd replaced orig, args replaced symbol-mapped list. occurs places cmd args appear wrapper.","code":"# a very simple function orig <- function(x, y) x + y # a simple wrapper debug_wrapper <- function(cmd, args, label = NULL) {       # call wrapped_remap to create a list   warg <- remap_symb(args)     # convert the remapped args into a string   arg_str <- warg %>%     purrr::imap_chr(       \\(k,v) sprintf(\"%s : %s\", k, v)     ) %>%     paste0(collapse = \"; \")    # emit debugging information   cat(     glue(\">>> called {label}: {arg_str}\\n\"),      file = stdout()   )    # call the original function   do.call(cmd, args) } dbg_orig <- wrapped_factory(\"orig\", debug_wrapper, label = \"orig.debug\") dbg_orig(1, 2) ## >>> called orig.debug: 1 : x; 2 : y ## [1] 3 dbg_orig ## function (x, y)  ## { ##     warg <- remap_symb(list(x = x, y = y)) ##     arg_str <- warg %>% purrr::imap_chr(function(k, v) sprintf(\"%s : %s\",  ##         k, v)) %>% paste0(collapse = \"; \") ##     cat(glue(\">>> called {label}: {arg_str}\\n\"), file = stdout()) ##     do.call(orig, list(x = x, y = y)) ## } ## <environment: 0x55c9d08e4a28>"},{"path":"http://localhost/articles/metaprogramming.html","id":"with_monkey_patch","dir":"Articles","previous_headings":"","what":"with_monkey_patch","title":"metaprogramming","text":"roughly thing wrapped_factory, functions defined namespace temporarily. Changes restored exit. following simple example. time_caller function calls Sys.Time. ’ll assume time_caller defined external namespace, don’t access time_caller directly. Alternatively, time_caller used extensively elsewhere redefining disruptive. case, ’s default behavior call Sys.Time return POSIXct local time zone. scenario need time_caller return something else. particular, ’d like timezone GMT. achieve temporarily changing behavior Sys.time time_caller invokes. check everything back normal monkey patch call:","code":"# suppose you couldn't change `date_caller` directly... time_caller <- function() {   Sys.time() } time_caller() ## [1] \"2024-09-24 12:49:55 PDT\" # apply a monkey patch that modifies the value returned with_monkey_patch(   \"base::Sys.time\",   # adapt time_caller so that it returns a result in GMT    wrapper = function(cmd, args, func) {         t <- do.call(func, args)     .POSIXct(t, \"GMT\")   },   {     # could be nested deep down in the call stack...     foo <- function() time_caller()     foo()   } ) ## [1] \"2024-09-24 19:49:55 GMT\" time_caller() ## [1] \"2024-09-24 12:49:55 PDT\""},{"path":"http://localhost/articles/metaprogramming.html","id":"a-real-example","dir":"Articles","previous_headings":"with_monkey_patch","what":"a real example","title":"metaprogramming","text":"example perhaps bit contrived, metayer found machinery useful affixing knitr hooks rmarkdown documents. Specifically, deep call stack, pkgdown::build_article invokes rmarkdown::html_document. wanted modify output nested html_document call. Rather return document created default, wanted return modified doc; particular, one set particular knitr hook, doc$knitr$knitr_hooks$metayer_hook = knitr_metayer_hook. approach since refactored away, remains viable solution original problem.","code":""},{"path":"http://localhost/articles/metayer-config.html","id":"config-yml","dir":"Articles","previous_headings":"","what":"config.yml","title":"Configuration","text":"Package configuration specified config.yml, designed mimic behavior config package. , currently three sections: default, testing, jupyter. section may adapt following subsections: logger, options. metayer loaded, automatically sets options sets loggers. “!optenv” YAML tag evaluated R. useful specifying R symbols configuration context, e.g., !optenv logger::appender_console. Note, security implications . Think using don’t malicious.","code":""},{"path":"http://localhost/articles/metayer-config.html","id":"mty-cli_null","dir":"Articles","previous_headings":"config.yml","what":"mty.cli_null","title":"Configuration","text":"cli methods, NULL values replaced value, e.g. “”.","code":""},{"path":"http://localhost/articles/metayer-config.html","id":"jupyter-notebook-yaml","dir":"Articles","previous_headings":"","what":"jupyter notebook YAML","title":"Configuration","text":"introduce YAML tag, “!with_env” glue injection environmental variables. useful directing pandoc configurable location.","code":""},{"path":"http://localhost/articles/metayer.html","id":"publishing-context","dir":"Articles","previous_headings":"","what":"publishing context","title":"getting started","text":"context figure created matters, context may require separate options configuration obtain uniform output. metayer::sure_plot provides solution. publishing context vignette develops better sense variability / consistency.","code":"sure_plot({     with(pcd, plot(x, y))   },   height = 5,   width = 5,   par_opts = list(bg = \"azure\") ) ## [DEBUG/metayer] [0] sureplot: dev_args: width  num 5[DEBUG/metayer] [0] sureplot: dev_args: height  num 5[DEBUG/metayer] [0] sureplot: dev_args: res  int 96[DEBUG/metayer] [0] sureplot: dev_args: units  chr \"in\"[DEBUG/metayer] [0] sureplot: dev_args: file  chr \"/tmp/Rtmp1OxKsm/file14214f36d3a800\"[DEBUG/metayer] .pubcontext: is_knitr[DEBUG/metayer] .with_grdev: grdev_name: png[DEBUG/metayer] .with_grdev: dev_args: filename  'fs_path' chr \"/tmp/Rtmp1OxKsm/file14214f36d3a800.png\"[DEBUG/metayer] .with_grdev: dev_args: width  num 5[DEBUG/metayer] .with_grdev: dev_args: height  num 5[DEBUG/metayer] .with_grdev: dev_args: units  chr \"in\"[DEBUG/metayer] .with_grdev: dev_args: pointsize  num 12[DEBUG/metayer] .with_grdev: dev_args: bg  chr \"white\"[DEBUG/metayer] .with_grdev: dev_args: res  int 96[DEBUG/metayer] .with_grdev: dev_args: type  language c(\"cairo\", \"cairo-png\", \"Xlib\", \"quartz\")[DEBUG/metayer] .with_grdev: dev_args: antialias  symbol ## [DEBUG/metayer] pimg_write_data: writing file: /home/dnlennon/Workspace/repos/metayer/docs/articles/metayer_files/figure-html/unnamed-chunk-2.png"},{"path":"http://localhost/articles/metayer.html","id":"cli-logger-integration","dir":"Articles","previous_headings":"","what":"cli / logger integration","title":"getting started","text":"code shifts prototype production, logging becomes important. Given ubiquity cli package, nice messages originally headed interactive terminal seamlessly redirected logs. cli logger integration vignette shows details metayer makes work.","code":"# contextualized cli calls cli_alert(\"do what you love!\") ## [INFO/global] → do what you love! ## → do what you love!"},{"path":"http://localhost/articles/metayer.html","id":"global-hierarchical-storage","dir":"Articles","previous_headings":"","what":"global hierarchical storage","title":"getting started","text":"metayer implements global hierarchical storage container simple use. hierarchical storage vignette deeper dive.","code":"rm.all() local({   order_id <- \"D1234\"   order <- storage_env(\"metayer\", \"menu\", \"dinner\", order_id)   str(order) }) ## <environment: 0x5e779dd3c508>  ##  - attr(*, \"name\")= 'glue' chr \".storage.metayer.menu.dinner.D1234\""},{"path":"http://localhost/articles/metayer.html","id":"metaprogramming-helpers","dir":"Articles","previous_headings":"","what":"metaprogramming helpers","title":"getting started","text":"metayer provides two methods easing metaprogramming tasks, wrapped_factory with_monkey_patch. Specifics available metaprogramming vignette.","code":""},{"path":"http://localhost/articles/metayer.html","id":"miscellanea","dir":"Articles","previous_headings":"","what":"miscellanea","title":"getting started","text":"useful metayer utilities can found miscellanea vignette.","code":""},{"path":"http://localhost/articles/miscellanea.html","id":"env","dir":"Articles","previous_headings":"","what":"env","title":"miscellanea","text":"","code":"## env_stack - inspect the chain of environments env_stack(global_env()) ##  [[1]] $ <env: global> ##  [[2]] $ <env: package:metayer> ##  [[3]] $ <env: package:stats> ##  [[4]] $ <env: package:graphics> ##  [[5]] $ <env: package:grDevices> ##  [[6]] $ <env: package:utils> ##  [[7]] $ <env: package:datasets> ##  [[8]] $ <env: devtools_shims> ##  [[9]] $ <env: package:testthat> ## [[10]] $ <env: package:methods> ## [[11]] $ <env: Autoloads> ## [[12]] $ <env: tools:callr> ## [[13]] $ <env: package:base> ## [[14]] $ <env: empty> ## env_stack - also works for function execution stacks / dynamic scoping env_stack(cli_alert, last = global_env()) ## [[1]] $ <env: wrapped-0x5998604bffc0> ## [[2]] $ <env: namespace:metayer> ## [[3]] $ <env: imports:metayer> ## [[4]] $ <env: namespace:base> ## [[5]] $ <env: global> ## env_rename - create an environment and give it a useful name env_rename(new_environment(), \"fooenv\") %>%   env_stack() ## [[1]] $ <env: fooenv> ## [[2]] $ <env: empty>"},{"path":"http://localhost/articles/miscellanea.html","id":"cli","dir":"Articles","previous_headings":"","what":"cli","title":"miscellanea","text":"","code":"## recover a message from a cli_message  seconds = 3 tryCatch(   cli_alert(\"aborting in {seconds} seconds: {NULL}\"),   message = function(msg) {     conditionMessage(msg)   } ) ## [INFO/global] → aborting in 3 seconds: <null> ## [1] \"→ aborting in 3 seconds: <null>\\n\""},{"path":"http://localhost/articles/miscellanea.html","id":"other","dir":"Articles","previous_headings":"","what":"other","title":"miscellanea","text":"","code":"## update_list - recursive update of lists; the second list replaces items in common with the first list l1 <- list(a = 1, b = list(b1 = 4, b2 = 5), c = 3, d = 4) l2 <- list(b = list(b2 = 6), d = 8) update_list(l1, l2) ## $a ## [1] 1 ##  ## $b ## $b$b1 ## [1] 4 ##  ## $b$b2 ## [1] 6 ##  ##  ## $c ## [1] 3 ##  ## $d ## [1] 8 ## mty_uuid - get a uuid mty_uuid() ## [1] \"1a1b93b8-e971-4836-8453-58fcb2dba134\" ## mty_uuid - use the uuid.generator and uuid.salt options to get reproducible behavior uuid <- function(salt = NULL) {   withr::with_options(     list(       uuid.generator = test_mty_uuid     ),     {       mty_uuid(salt)     }   ) }  (u1 <- uuid(12345)) ## [1] \"615618d7-736be-e2d97-7e23a-a492cd8334ab3\" (u2 <- uuid()) ## [1] \"e5ae1581-1f1f1-1f68a-ae9a0-04d8eb7f965ed\" (u3 <- uuid()) ## [1] \"5e2242c2-2c1f7-728ee-e8766-606f2a5da26f7\" (u4 <- uuid(12345)) ## [1] \"615618d7-736be-e2d97-7e23a-a492cd8334ab3\" (u5 <- uuid()) ## [1] \"e5ae1581-1f1f1-1f68a-ae9a0-04d8eb7f965ed\" u1 == u4 ## [1] TRUE u2 == u5 ## [1] TRUE"},{"path":"http://localhost/articles/miscellanea.html","id":"rm-all","dir":"Articles","previous_headings":"","what":"rm.all","title":"miscellanea","text":"Remove everything whitelist; including dotted variables, e.g. “.storage”.","code":"## show the variables in the global environment ls(all.names = TRUE) ##  [1] \".First\"       \".Random.seed\" \".storage\"     \"l1\"           \"l2\"           ##  [6] \"pcd\"          \"seconds\"      \"u1\"           \"u2\"           \"u3\"           ## [11] \"u4\"           \"u5\"           \"uuid\"         \"workflow\" ## rm.all - everything but 'u2', 'uuid', and 'workflow'; N.B., workflow is a development artifact hard-coded into the exclusion list rm.all(exclusions = c(\"u2\", \"uuid\")) ls(all.names = TRUE) ## [1] \"u2\"       \"uuid\"     \"workflow\""},{"path":"http://localhost/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dustin Lennon. Author, maintainer.","code":""},{"path":"http://localhost/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lennon D (2024). metayer: tools package development. R package version 0.2.4, http://localhost.","code":"@Manual{,   title = {metayer: tools for package development},   author = {Dustin Lennon},   year = {2024},   note = {R package version 0.2.4},   url = {http://localhost}, }"},{"path":"http://localhost/index.html","id":"metayer","dir":"","previous_headings":"","what":"tools for package development","title":"tools for package development","text":"Metayer collection package development tools. package provides: graphic device wrappers allow uniform figure generation across publishing contexts including Jupyter, knitr, shell; integration cli logger packages calls cli methods show logs, imbued package-level context; global, hierarchical storage container leverages native R environments; -style wrapper wrapper facilitates temporary safer monkey patching namespaced internals; helper methods inspecting function stack environments associated dynamic scoping; , useful particularly exciting utility methods.","code":""},{"path":"http://localhost/reference/appender_jupyter.html","id":null,"dir":"Reference","previous_headings":"","what":"An appender for jupyter (with stderr) — appender_jupyter","title":"An appender for jupyter (with stderr) — appender_jupyter","text":"jupyter, stderr show console, messages show notebook.  jupyter context, also want display something looks like usual message output.","code":""},{"path":"http://localhost/reference/appender_jupyter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An appender for jupyter (with stderr) — appender_jupyter","text":"","code":"appender_jupyter(lines)"},{"path":"http://localhost/reference/cli_app_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the default CLI app object — cli_app_factory","title":"Create the default CLI app object — cli_app_factory","text":"keywords internal","code":""},{"path":"http://localhost/reference/cli_app_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the default CLI app object — cli_app_factory","text":"","code":"cli_app_factory()"},{"path":"http://localhost/reference/cli_metayer_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle CLI messages — cli_metayer_handler","title":"Handle CLI messages — cli_metayer_handler","text":"Handle CLI messages","code":""},{"path":"http://localhost/reference/cli_metayer_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle CLI messages — cli_metayer_handler","text":"","code":"cli_metayer_handler(msg)"},{"path":"http://localhost/reference/cli_metayer_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle CLI messages — cli_metayer_handler","text":"msg cli_message","code":""},{"path":"http://localhost/reference/cli_nullity_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Let cli methods replace NULL values with sensible substitutions — cli_nullity_handler","title":"Let cli methods replace NULL values with sensible substitutions — cli_nullity_handler","text":"Let cli methods replace NULL values sensible substitutions","code":""},{"path":"http://localhost/reference/cli_nullity_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Let cli methods replace NULL values with sensible substitutions — cli_nullity_handler","text":"","code":"cli_nullity_handler(msg)"},{"path":"http://localhost/reference/cli_nullity_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Let cli methods replace NULL values with sensible substitutions — cli_nullity_handler","text":"msg cli_message","code":""},{"path":"http://localhost/reference/config_get.html","id":null,"dir":"Reference","previous_headings":"","what":"A variation of config::get that can utilize backreferences — config_get","title":"A variation of config::get that can utilize backreferences — config_get","text":"variation config::get can utilize backreferences","code":""},{"path":"http://localhost/reference/config_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A variation of config::get that can utilize backreferences — config_get","text":"","code":"config_get(   ...,   r_config_active = Sys.getenv(\"R_CONFIG_ACTIVE\", \"default\"),   file = Sys.getenv(\"R_CONFIG_FILE\", here::here(\"config.yml\")),   merge.precedence = \"override\",   handlers = list(optenv = yaml_optenv_handler, with_env = yaml_withenv_handler) )"},{"path":"http://localhost/reference/config_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A variation of config::get that can utilize backreferences — config_get","text":"... passed purrr::pluck file yaml file; defaults config.yml config configuration; defaults R_CONFIG_ACTIVE","code":""},{"path":"http://localhost/reference/decode_knitr.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: decode the start of an encoded knitr chunk — decode_knitr","title":"Internal: decode the start of an encoded knitr chunk — decode_knitr","text":"N.B., convenient place inject knitr chunk header, e.g., metayer_hook","code":""},{"path":"http://localhost/reference/decode_knitr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: decode the start of an encoded knitr chunk — decode_knitr","text":"","code":"decode_knitr(enc, dict)"},{"path":"http://localhost/reference/decode_knitr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: decode the start of an encoded knitr chunk — decode_knitr","text":"dict environment use dictionary","code":""},{"path":"http://localhost/reference/dot-pubcontext.html","id":null,"dir":"Reference","previous_headings":"","what":"Invoke context dependent code — .pubcontext","title":"Invoke context dependent code — .pubcontext","text":"Invoke context dependent code","code":""},{"path":"http://localhost/reference/dot-pubcontext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invoke context dependent code — .pubcontext","text":"","code":".pubcontext(   jupyter_expr = NULL,   knitr_expr = NULL,   rstudio_expr = NULL,   interactive_expr = NULL,   non_interactive_expr = NULL,   raise = FALSE,   .envir = parent.frame() )"},{"path":"http://localhost/reference/dot-pubcontext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invoke context dependent code — .pubcontext","text":"raise boolean, TRUE, raise errors .envir environment evaluate code block","code":""},{"path":"http://localhost/reference/dot-with_grdev.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal. Execute a code block in a graphics context. — .with_grdev","title":"Internal. Execute a code block in a graphics context. — .with_grdev","text":"Internal.  Execute code block graphics context.","code":""},{"path":"http://localhost/reference/dot-with_grdev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal. Execute a code block in a graphics context. — .with_grdev","text":"","code":".with_grdev(   grdev_name,   .expr,   dev_args = list(),   par_opts = list(),   .envir = parent.frame() )"},{"path":"http://localhost/reference/dot-with_grdev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal. Execute a code block in a graphics context. — .with_grdev","text":"grdev_name name graphics object .expr expression evaluate dev_args args pass device par_opts options pass par .envir environment execute code block","code":""},{"path":"http://localhost/reference/dot-with_grdev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal. Execute a code block in a graphics context. — .with_grdev","text":"invisible image data","code":""},{"path":"http://localhost/reference/dot-with_monkey_patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal. Temporarily monkey patch a namespaced method — .with_monkey_patch","title":"Internal. Temporarily monkey patch a namespaced method — .with_monkey_patch","text":"Internal.  Temporarily monkey patch namespaced method","code":""},{"path":"http://localhost/reference/dot-with_monkey_patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal. Temporarily monkey patch a namespaced method — .with_monkey_patch","text":"","code":".with_monkey_patch(fqn, wrapper, expr, .envir = parent.frame())"},{"path":"http://localhost/reference/dot-with_monkey_patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal. Temporarily monkey patch a namespaced method — .with_monkey_patch","text":"fqn fully qualified name, e.g. \"rmarkdown::html_document\" wrapper wrapper signature function(cmd, args, func) expr expression .envir environment evaluate expr","code":""},{"path":"http://localhost/reference/encode_knitr.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: encode the start of a knitr chunk as a hash. — encode_knitr","title":"Internal: encode the start of a knitr chunk as a hash. — encode_knitr","text":"order pandoc work expected, needs interpret content braces class tags.  Note requires adding (later removing) single space., e.g.","code":""},{"path":"http://localhost/reference/encode_knitr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: encode the start of a knitr chunk as a hash. — encode_knitr","text":"","code":"encode_knitr(l, dict, key = NULL)"},{"path":"http://localhost/reference/encode_knitr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: encode the start of a knitr chunk as a hash. — encode_knitr","text":"l line encode dict environment use dictionary","code":""},{"path":"http://localhost/reference/encode_knitr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal: encode the start of a knitr chunk as a hash. — encode_knitr","text":"","code":"^^^"},{"path":"http://localhost/reference/env_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename an environment — env_rename","title":"Rename an environment — env_rename","text":"Rename environment","code":""},{"path":"http://localhost/reference/env_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename an environment — env_rename","text":"","code":"env_rename(e, name, envir = parent.frame())"},{"path":"http://localhost/reference/env_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename an environment — env_rename","text":"e environment name new name, passed str_glue envir environment pass str_glue","code":""},{"path":"http://localhost/reference/env_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename an environment — env_rename","text":"environment 'name' attribute set","code":""},{"path":"http://localhost/reference/env_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the environment stack — env_stack","title":"Return the environment stack — env_stack","text":"Utility function wraps env_parents.  However, always includes current environment handle function environments.","code":""},{"path":"http://localhost/reference/env_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the environment stack — env_stack","text":"","code":"env_stack(e, last = getOption(\"pkgette.env_stack_last\"))"},{"path":"http://localhost/reference/env_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the environment stack — env_stack","text":"e environment; function last passed underlying call env_parents","code":""},{"path":"http://localhost/reference/env_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the environment stack — env_stack","text":"list environments","code":""},{"path":"http://localhost/reference/grdev_adapt.html","id":null,"dir":"Reference","previous_headings":"","what":"For the specified grdev, select an appropriate subset of an argset — grdev_adapt","title":"For the specified grdev, select an appropriate subset of an argset — grdev_adapt","text":"also incorporates default arguments","code":""},{"path":"http://localhost/reference/grdev_adapt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For the specified grdev, select an appropriate subset of an argset — grdev_adapt","text":"","code":"grdev_adapt(grdev, argset)"},{"path":"http://localhost/reference/grdev_adapt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For the specified grdev, select an appropriate subset of an argset — grdev_adapt","text":"grdev graphics object acquired grdev_get argset passed argument set","code":""},{"path":"http://localhost/reference/grdev_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a graphics object by its name. — grdev_get","title":"Get a graphics object by its name. — grdev_get","text":"Get graphics object name.","code":""},{"path":"http://localhost/reference/grdev_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a graphics object by its name. — grdev_get","text":"","code":"grdev_get(grdev_name)"},{"path":"http://localhost/reference/grdev_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a graphics object by its name. — grdev_get","text":"grdev_name name graphics object","code":""},{"path":"http://localhost/reference/grdev_resolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve any ambiguities in file / filename args — grdev_resolve","title":"Resolve any ambiguities in file / filename args — grdev_resolve","text":"Resolve ambiguities file / filename args","code":""},{"path":"http://localhost/reference/grdev_resolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve any ambiguities in file / filename args — grdev_resolve","text":"","code":"grdev_resolve(grdev, argset)"},{"path":"http://localhost/reference/grdev_resolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve any ambiguities in file / filename args — grdev_resolve","text":"grdev graphics object acquired grdev_get argset passed argument set","code":""},{"path":"http://localhost/reference/initialize_logging.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup logging — initialize_logging","title":"Setup logging — initialize_logging","text":"Setup logging","code":""},{"path":"http://localhost/reference/initialize_logging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup logging — initialize_logging","text":"","code":"initialize_logging(   home = fs::path_home(),   max_bytes = 1000000L,   max_files = 7L,   create_directory = TRUE )"},{"path":"http://localhost/reference/initialize_logging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup logging — initialize_logging","text":"home user's home directory max_bytes max_bytes parameter passed logger::appender_file max_files max_files parameter passed logger::appender_file create_directory boolean, TRUE create directory","code":""},{"path":"http://localhost/reference/ipynb_yaml_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract YAML from ipynb — ipynb_yaml_extract","title":"Extract YAML from ipynb — ipynb_yaml_extract","text":"Returns nested list comprised merged YAML raw notebook cells.","code":""},{"path":"http://localhost/reference/ipynb_yaml_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract YAML from ipynb — ipynb_yaml_extract","text":"","code":"ipynb_yaml_extract(ipynb_in)"},{"path":"http://localhost/reference/ipynb_yaml_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract YAML from ipynb — ipynb_yaml_extract","text":"ipynb_in ipynb file","code":""},{"path":"http://localhost/reference/is_knitr_chunk_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: is this the start of a knitr chunk? — is_knitr_chunk_start","title":"Internal: is this the start of a knitr chunk? — is_knitr_chunk_start","text":"Internal:  start knitr chunk?","code":""},{"path":"http://localhost/reference/is_knitr_chunk_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: is this the start of a knitr chunk? — is_knitr_chunk_start","text":"","code":"is_knitr_chunk_start(l)"},{"path":"http://localhost/reference/is_knitr_chunk_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: is this the start of a knitr chunk? — is_knitr_chunk_start","text":"l line test","code":""},{"path":"http://localhost/reference/is_knitr_enc.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: is this the start of an encoded knitr chunk? — is_knitr_enc","title":"Internal: is this the start of an encoded knitr chunk? — is_knitr_enc","text":"Internal:  start encoded knitr chunk?","code":""},{"path":"http://localhost/reference/is_knitr_enc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: is this the start of an encoded knitr chunk? — is_knitr_enc","text":"","code":"is_knitr_enc(l)"},{"path":"http://localhost/reference/is_knitr_enc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: is this the start of an encoded knitr chunk? — is_knitr_enc","text":"l line test","code":""},{"path":"http://localhost/reference/knitr_metayer_hook.html","id":null,"dir":"Reference","previous_headings":"","what":"The metayer/knitr hook used for preprocessing / postprocessing — knitr_metayer_hook","title":"The metayer/knitr hook used for preprocessing / postprocessing — knitr_metayer_hook","text":"Refer knitr documentation.  gives us opportunity rewrite chunk's output knit.md stage.  particular, use images:","code":""},{"path":"http://localhost/reference/knitr_metayer_hook.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The metayer/knitr hook used for preprocessing / postprocessing — knitr_metayer_hook","text":"","code":"knitr_metayer_hook(before, options, envir, name, ...)"},{"path":"http://localhost/reference/knitr_metayer_hook.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The metayer/knitr hook used for preprocessing / postprocessing — knitr_metayer_hook","text":"boolean options current chunk options envir environment code executed name name associated hook, e.g. \"metayer\" ... match knitr hook signature","code":""},{"path":"http://localhost/reference/knitr_metayer_hook.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The metayer/knitr hook used for preprocessing / postprocessing — knitr_metayer_hook","text":"HTML images encoded base64 wrapped img tag; PDF images referenced markdown construction, e.g. \"\"","code":""},{"path":"http://localhost/reference/logger_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the logger logs — logger_reset","title":"Reset the logger logs — logger_reset","text":"Warning / Experimental:  accesses private data logger package undocumented way","code":""},{"path":"http://localhost/reference/logger_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the logger logs — logger_reset","text":"","code":"logger_reset()"},{"path":"http://localhost/reference/metayer-config.html","id":null,"dir":"Reference","previous_headings":"","what":"metayer environment variables and options — metayer-config","title":"metayer environment variables and options — metayer-config","text":"metayer environment variables options","code":""},{"path":[]},{"path":"http://localhost/reference/metayer-config.html","id":"config-yml","dir":"Reference","previous_headings":"","what":"config.yml","title":"metayer environment variables and options — metayer-config","text":"Package configuration specified config.yml, designed mimic behavior config package.  , currently three sections: default, testing, jupyter.  section may adapt following subsections: logger, options. metayer loaded, automatically sets options sets loggers. \"!optenv\" YAML tag evaluated R.  useful specifying R symbols configuration context, e.g., !optenv logger::appender_console.  Note, security implications .  Think using malicious.","code":""},{"path":"http://localhost/reference/metayer-config.html","id":"mty-cli-null","dir":"Reference","previous_headings":"","what":"mty.cli_null","title":"metayer environment variables and options — metayer-config","text":"cli methods, NULL values replaced value, e.g. \"\".","code":""},{"path":"http://localhost/reference/metayer-config.html","id":"jupyter-notebook-yaml","dir":"Reference","previous_headings":"","what":"jupyter notebook YAML","title":"metayer environment variables and options — metayer-config","text":"introduce YAML tag, \"!with_env\" glue injection environmental variables.  useful directing pandoc configurable location.","code":""},{"path":"http://localhost/reference/metayer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metayer: tools for package development — metayer-package","title":"metayer: tools for package development — metayer-package","text":"Metayer collection package development tools. provides graphic device wrappers allow uniform figure generation across publishing contexts including Jupyter, knitr, shell. Metayer also integrates cli logger packages calls cli methods show logs imbued package-level context. global, hierarchical storage container leverages native R environments. Metayer also provides -style wrapper wrapper facilitates temporary safe monkey patching namespaced internals. also helper methods inspecting function stack environments associated dynamic scoping.","code":""},{"path":[]},{"path":"http://localhost/reference/metayer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metayer: tools for package development — metayer-package","text":"Maintainer: Dustin Lennon dustin.lennon@gmail.com (ORCID)","code":""},{"path":"http://localhost/reference/mocked_log_level_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"A mocked log_level factory — mocked_log_level_factory","title":"A mocked log_level factory — mocked_log_level_factory","text":"produces double wrapping log_level.  means function signature logger::log_level, call_match function obtains useable default values.","code":""},{"path":"http://localhost/reference/mocked_log_level_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A mocked log_level factory — mocked_log_level_factory","text":"","code":"mocked_log_level_factory(logfile = stderr(), envir = parent.frame())"},{"path":"http://localhost/reference/mocked_log_level_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A mocked log_level factory — mocked_log_level_factory","text":"logfile location redirecting log data","code":""},{"path":"http://localhost/reference/mty_uuid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a uuid — mty_uuid","title":"Get a uuid — mty_uuid","text":"Get uuid","code":""},{"path":"http://localhost/reference/mty_uuid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a uuid — mty_uuid","text":"","code":"mty_uuid(...)"},{"path":"http://localhost/reference/mty_uuid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a uuid — mty_uuid","text":"... pass parameters","code":""},{"path":"http://localhost/reference/pimg_as_html_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap png_data in an HTML img wrapper — pimg_as_html_data","title":"Wrap png_data in an HTML img wrapper — pimg_as_html_data","text":"Wrap png_data HTML img wrapper","code":""},{"path":"http://localhost/reference/pimg_as_html_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap png_data in an HTML img wrapper — pimg_as_html_data","text":"","code":"pimg_as_html_data(png_data, alt = NULL)"},{"path":"http://localhost/reference/pimg_as_html_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap png_data in an HTML img wrapper — pimg_as_html_data","text":"png_data raw png data","code":""},{"path":"http://localhost/reference/pimg_as_html_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap png_data in an HTML img wrapper — pimg_as_html_data","text":"IMG element","code":""},{"path":"http://localhost/reference/prep_articles.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare notebooks for downstream processing — prep_articles","title":"Prepare notebooks for downstream processing — prep_articles","text":"Like Makefile, specify Rmd files targets, processes ipynb files create .","code":""},{"path":"http://localhost/reference/prep_articles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare notebooks for downstream processing — prep_articles","text":"","code":"prep_articles(..., regexp = \"*Rmd\")"},{"path":"http://localhost/reference/prep_articles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare notebooks for downstream processing — prep_articles","text":"... path Rmd files, passed ::regexp regular expression filtering files","code":""},{"path":"http://localhost/reference/pub_ipynb_to_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ipynb to knitr-read rmd — pub_ipynb_to_rmd","title":"Convert ipynb to knitr-read rmd — pub_ipynb_to_rmd","text":"Convert ipynb knitr-read rmd","code":""},{"path":"http://localhost/reference/pub_ipynb_to_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ipynb to knitr-read rmd — pub_ipynb_to_rmd","text":"","code":"pub_ipynb_to_rmd(ipynb_in, rmd_out = NULL)"},{"path":"http://localhost/reference/pub_ipynb_to_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ipynb to knitr-read rmd — pub_ipynb_to_rmd","text":"ipynb_in ipynb filename rmd_out rmd filename","code":""},{"path":"http://localhost/reference/pub_rmd_to_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from rmd to md — pub_rmd_to_md","title":"Convert from rmd to md — pub_rmd_to_md","text":"Convert rmd md","code":""},{"path":"http://localhost/reference/pub_rmd_to_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from rmd to md — pub_rmd_to_md","text":"","code":"pub_rmd_to_md(rmd_in, md_out = NULL, dev = NULL, root_dir = NULL)"},{"path":"http://localhost/reference/pub_rmd_to_md.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from rmd to md — pub_rmd_to_md","text":"rmd_in input file, Rmd file prepared rmarkdown::convert_ipynb md_out output file, Rmd file conf nested list converted YAML header","code":""},{"path":"http://localhost/reference/pub_rmd_to_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"postprocess output of rmarkdown::convert_ipynb — pub_rmd_to_rmd","title":"postprocess output of rmarkdown::convert_ipynb — pub_rmd_to_rmd","text":"part multi-step process converts jupyter notebooks viable knitr Rmd files.","code":""},{"path":"http://localhost/reference/pub_rmd_to_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"postprocess output of rmarkdown::convert_ipynb — pub_rmd_to_rmd","text":"","code":"pub_rmd_to_rmd(rmd_in, rmd_out = NULL, conf = list())"},{"path":"http://localhost/reference/pub_rmd_to_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"postprocess output of rmarkdown::convert_ipynb — pub_rmd_to_rmd","text":"rmd_in input file, Rmd file prepared rmarkdown::convert_ipynb rmd_out output file, Rmd file conf nested list converted YAML header","code":""},{"path":"http://localhost/reference/pub_rmd_to_rmd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"postprocess output of rmarkdown::convert_ipynb — pub_rmd_to_rmd","text":"particular, encodes knitr cell headers class calling pandoc.  required pandoc misunderstands Rmd syntax. call pandoc strips existing YAML input.  , user supplied YAML written , followed decoding class tag restore original knitr cell headers.","code":""},{"path":"http://localhost/reference/pubcontext.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide client code for various contexts — pubcontext","title":"Provide client code for various contexts — pubcontext","text":"Provide client code various contexts","code":""},{"path":"http://localhost/reference/pubcontext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide client code for various contexts — pubcontext","text":"","code":"pubcontext(   jupyter_code = NULL,   knitr_code = NULL,   rstudio_code = NULL,   interactive_code = NULL,   non_interactive_code = NULL,   raise = FALSE,   .envir = parent.frame() )"},{"path":"http://localhost/reference/pubcontext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide client code for various contexts — pubcontext","text":"jupyter_code jupyter client code knitr_code knitr client code rstudio_code rstudio client code interactive_code interactive script client code non_interactive_code non-interactive script client code raise boolean, TRUE, raise errors .envir environment evaluate code block","code":""},{"path":"http://localhost/reference/pubcontext_eval.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal — pubcontext_eval","title":"Internal — pubcontext_eval","text":"Internal","code":""},{"path":"http://localhost/reference/pubcontext_eval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal — pubcontext_eval","text":"","code":"pubcontext_eval(provided_expr, context_name, raise, .envir = parent.frame())"},{"path":"http://localhost/reference/remap_symb.html","id":null,"dir":"Reference","previous_headings":"","what":"Remap symbols in a list — remap_symb","title":"Remap symbols in a list — remap_symb","text":"Remap symbols list","code":""},{"path":"http://localhost/reference/remap_symb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remap symbols in a list — remap_symb","text":"","code":"remap_symb(args, envir = parent.frame())"},{"path":"http://localhost/reference/remap_symb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remap symbols in a list — remap_symb","text":"args passed args, list symb = symb","code":""},{"path":"http://localhost/reference/remap_symb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remap symbols in a list — remap_symb","text":"list value symbols evaluated","code":""},{"path":"http://localhost/reference/reset_options_from_conf.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset options from config.yml — reset_options_from_conf","title":"Reset options from config.yml — reset_options_from_conf","text":"Reset options config.yml","code":""},{"path":"http://localhost/reference/reset_options_from_conf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset options from config.yml — reset_options_from_conf","text":"","code":"reset_options_from_conf()"},{"path":"http://localhost/reference/rm.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function that resets the global environment. — rm.all","title":"Utility function that resets the global environment. — rm.all","text":"Utility function resets global environment.","code":""},{"path":"http://localhost/reference/rm.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function that resets the global environment. — rm.all","text":"","code":"rm.all(exclusions = c())"},{"path":"http://localhost/reference/rm.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function that resets the global environment. — rm.all","text":"exclusions list object names excluded removal.","code":""},{"path":"http://localhost/reference/storage_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a storage environment — storage_env","title":"Retrieve a storage environment — storage_env","text":"Retrieve storage environment","code":""},{"path":"http://localhost/reference/storage_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a storage environment — storage_env","text":"","code":"storage_env(..., .store = \".storage\", .envir = rlang::global_env())"},{"path":"http://localhost/reference/storage_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a storage environment — storage_env","text":"... indexing collection character objects .store name storage .envir environment bind storage data structure","code":""},{"path":"http://localhost/reference/storage_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a storage environment — storage_env","text":"specified environment","code":""},{"path":"http://localhost/reference/storage_purge.html","id":null,"dir":"Reference","previous_headings":"","what":"Purge the storage — storage_purge","title":"Purge the storage — storage_purge","text":"Purge storage","code":""},{"path":"http://localhost/reference/storage_purge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purge the storage — storage_purge","text":"","code":"storage_purge(.store = \".storage\", .envir = rlang::global_env())"},{"path":"http://localhost/reference/storage_purge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purge the storage — storage_purge","text":".store name storage .envir environment purge storage_env data structure","code":""},{"path":"http://localhost/reference/sure_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create uniform plots across publishing contexts — sure_plot","title":"Create uniform plots across publishing contexts — sure_plot","text":"Create uniform plots across publishing contexts","code":""},{"path":"http://localhost/reference/sure_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create uniform plots across publishing contexts — sure_plot","text":"","code":"sure_plot(   code,   width = getOption(\"mty.fig.width\", 7),   height = getOption(\"mty.fig.height\", 7),   res = getOption(\"mty.fig.res\", 96),   units = getOption(\"mty.fig.units\", \"in\"),   file = tempfile(),   ...,   par_opts = list(),   .envir = parent.frame() )"},{"path":"http://localhost/reference/sure_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create uniform plots across publishing contexts — sure_plot","text":"code client code width width height height res resolution dpi units units width height file file, mapped filename, device expects ... parameters passed device args par_opts graphics pararameters .envir environment evaluate client code","code":""},{"path":"http://localhost/reference/test_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"A less motivational test — test_filter","title":"A less motivational test — test_filter","text":"less motivational test","code":""},{"path":"http://localhost/reference/test_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A less motivational test — test_filter","text":"","code":"test_filter(test_name)"},{"path":"http://localhost/reference/test_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A less motivational test — test_filter","text":"test_name canonical stub name, e.g., 'logger'","code":""},{"path":"http://localhost/reference/test_mty_uuid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a predictable identifier sequence — test_mty_uuid","title":"Create a predictable identifier sequence — test_mty_uuid","text":"probably useful testing, one can set corresponding entry config.yml get reproducible results.","code":""},{"path":"http://localhost/reference/test_mty_uuid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a predictable identifier sequence — test_mty_uuid","text":"","code":"test_mty_uuid(salt = NULL)"},{"path":"http://localhost/reference/test_sanitize.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic test sanitation — test_sanitize","title":"Basic test sanitation — test_sanitize","text":": runs deferred tasks may pending calls devtools::load_all testing resets loggers purges storage calls rm.noted exclusions sets deferred storage purge exit","code":""},{"path":"http://localhost/reference/test_sanitize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic test sanitation — test_sanitize","text":"","code":"test_sanitize(exclusions = c(), envir = parent.frame())"},{"path":"http://localhost/reference/test_sanitize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic test sanitation — test_sanitize","text":"exclusions list object names exclude rm.envir local environment","code":""},{"path":"http://localhost/reference/update_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively update a list — update_list","title":"Recursively update a list — update_list","text":"Recursively update list","code":""},{"path":"http://localhost/reference/update_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively update a list — update_list","text":"","code":"update_list(x, y)"},{"path":"http://localhost/reference/update_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively update a list — update_list","text":"x destination y update","code":""},{"path":"http://localhost/reference/with_grdev.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a code block in a graphics context. — with_grdev","title":"Execute a code block in a graphics context. — with_grdev","text":"Execute code block graphics context.","code":""},{"path":"http://localhost/reference/with_grdev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a code block in a graphics context. — with_grdev","text":"","code":"with_grdev(   grdev_name,   code,   width = getOption(\"mty.fig.width\", 7),   height = getOption(\"mty.fig.height\", 7),   res = getOption(\"mty.fig.res\", 96),   units = getOption(\"mty.fig.units\", \"in\"),   ...,   par_opts = list(),   .envir = parent.frame() )"},{"path":"http://localhost/reference/with_grdev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a code block in a graphics context. — with_grdev","text":"grdev_name name graphics object width width height height res resolution units units width height ... passed dev_args par_opts options pass par .envir environment execute code block","code":""},{"path":"http://localhost/reference/with_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate client code with logging — with_logger","title":"Evaluate client code with logging — with_logger","text":"Evaluate client code logging","code":""},{"path":"http://localhost/reference/with_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate client code with logging — with_logger","text":"","code":"with_logger(code, .local_envir = parent.frame(), level = NULL)"},{"path":"http://localhost/reference/with_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate client code with logging — with_logger","text":"code client code .local_envir environment evaluate client code level logger level; may override condition message defaults","code":""},{"path":"http://localhost/reference/with_monkey_patch.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily monkey patch a namespaced method — with_monkey_patch","title":"Temporarily monkey patch a namespaced method — with_monkey_patch","text":"Temporarily monkey patch namespaced method","code":""},{"path":"http://localhost/reference/with_monkey_patch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily monkey patch a namespaced method — with_monkey_patch","text":"","code":"with_monkey_patch(fqn, wrapper, code, .envir = parent.frame())"},{"path":"http://localhost/reference/with_monkey_patch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily monkey patch a namespaced method — with_monkey_patch","text":"fqn fully qualified name, e.g. \"rmarkdown::html_document\" wrapper wrapper signature function(cmd, args, func) code user code .envir environment evaluate expr","code":""},{"path":"http://localhost/reference/wrap_get_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped namespace — wrap_get_namespace","title":"Wrapped namespace — wrap_get_namespace","text":"Wrapped namespace","code":""},{"path":"http://localhost/reference/wrap_get_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped namespace — wrap_get_namespace","text":"","code":"wrap_get_namespace(.caller_env)"},{"path":"http://localhost/reference/wrap_get_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped namespace — wrap_get_namespace","text":".caller_env caller environment","code":""},{"path":"http://localhost/reference/wrap_get_namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped namespace — wrap_get_namespace","text":"namespace","code":""},{"path":"http://localhost/reference/wrapped_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapped cli functions — cli_abort","title":"wrapped cli functions — cli_abort","text":"functions wrapped versions cli package. allows us inject logging metadata usual code flow.","code":""},{"path":"http://localhost/reference/wrapped_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapped cli functions — cli_abort","text":"","code":"cli_abort(   message,   ...,   call = .envir,   .envir = parent.frame(),   .frame = .envir )  cli_alert(text, id = NULL, class = NULL, wrap = FALSE, .envir = parent.frame())  cli_alert_danger(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )  cli_alert_info(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )  cli_alert_success(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )  cli_alert_warning(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )  cli_blockquote(   quote,   citation = NULL,   id = NULL,   class = NULL,   .envir = parent.frame() )  cli_bullets(text, id = NULL, class = NULL, .envir = parent.frame())  cli_bullets_raw(text, id = NULL, class = NULL)  cli_code(   lines = NULL,   ...,   language = \"R\",   .auto_close = TRUE,   .envir = environment() )  cli_div(   id = NULL,   class = NULL,   theme = NULL,   .auto_close = TRUE,   .envir = parent.frame() )  cli_dl(   items = NULL,   labels = names(items),   id = NULL,   class = NULL,   .close = TRUE,   .auto_close = TRUE,   .envir = parent.frame() )  cli_end(id = NULL)  cli_format(x, style = NULL, ...)  cli_format_method(expr, theme = getOption(\"cli.theme\"))  cli_h1(text, id = NULL, class = NULL, .envir = parent.frame())  cli_h2(text, id = NULL, class = NULL, .envir = parent.frame())  cli_h3(text, id = NULL, class = NULL, .envir = parent.frame())  cli_inform(message, ..., .envir = parent.frame())  cli_li(   items = NULL,   labels = names(items),   id = NULL,   class = NULL,   .auto_close = TRUE,   .envir = parent.frame() )  cli_ol(   items = NULL,   id = NULL,   class = NULL,   .close = TRUE,   .auto_close = TRUE,   .envir = parent.frame() )  cli_par(id = NULL, class = NULL, .auto_close = TRUE, .envir = parent.frame())  cli_process_done(   id = NULL,   msg_done = NULL,   .envir = parent.frame(),   done_class = \"alert-success\" )  cli_process_failed(   id = NULL,   msg = NULL,   msg_failed = NULL,   .envir = parent.frame(),   failed_class = \"alert-danger\" )  cli_process_start(   msg,   msg_done = paste(msg, \"... done\"),   msg_failed = paste(msg, \"... failed\"),   on_exit = c(\"auto\", \"failed\", \"done\"),   msg_class = \"alert-info\",   done_class = \"alert-success\",   failed_class = \"alert-danger\",   .auto_close = TRUE,   .envir = parent.frame() )  cli_progress_along(   x,   name = NULL,   total = length(x),   ...,   .envir = parent.frame() )  cli_progress_bar(   name = NULL,   status = NULL,   type = c(\"iterator\", \"tasks\", \"download\", \"custom\"),   total = NA,   format = NULL,   format_done = NULL,   format_failed = NULL,   clear = getOption(\"cli.progress_clear\", TRUE),   current = TRUE,   auto_terminate = type != \"download\",   extra = NULL,   .auto_close = TRUE,   .envir = parent.frame() )  cli_progress_demo(   name = NULL,   status = NULL,   type = c(\"iterator\", \"tasks\", \"download\", \"custom\"),   total = NA,   .envir = parent.frame(),   ...,   at = if (is_interactive()) NULL else 50,   show_after = 0,   live = NULL,   delay = 0,   start = as.difftime(5, units = \"secs\") )  cli_progress_done(id = NULL, .envir = parent.frame(), result = \"done\")  cli_progress_message(   msg,   current = TRUE,   .auto_close = TRUE,   .envir = parent.frame(),   ... )  cli_progress_output(text, id = NULL, .envir = parent.frame())  cli_progress_step(   msg,   msg_done = msg,   msg_failed = msg,   spinner = FALSE,   class = if (!spinner) \".alert-info\",   current = TRUE,   .auto_close = TRUE,   .envir = parent.frame(),   ... )  cli_progress_update(   inc = NULL,   set = NULL,   total = NULL,   status = NULL,   extra = NULL,   id = NULL,   force = FALSE,   .envir = parent.frame() )  cli_rule(   left = \"\",   center = \"\",   right = \"\",   id = NULL,   .envir = parent.frame() )  cli_status(   msg,   msg_done = paste(msg, \"... done\"),   msg_failed = paste(msg, \"... failed\"),   .keep = FALSE,   .auto_close = TRUE,   .envir = parent.frame(),   .auto_result = c(\"clear\", \"done\", \"failed\", \"auto\") )  cli_status_clear(   id = NULL,   result = c(\"clear\", \"done\", \"failed\"),   msg_done = NULL,   msg_failed = NULL,   .envir = parent.frame() )  cli_status_update(   id = NULL,   msg = NULL,   msg_done = NULL,   msg_failed = NULL,   .envir = parent.frame() )  cli_text(..., .envir = parent.frame())  cli_ul(   items = NULL,   id = NULL,   class = NULL,   .close = TRUE,   .auto_close = TRUE,   .envir = parent.frame() )  cli_vec(x, style = list())  cli_verbatim(..., .envir = parent.frame())  cli_warn(message, ..., .envir = parent.frame())"},{"path":"http://localhost/reference/wrapped_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a wrapped function — wrapped_factory","title":"Produce a wrapped function — wrapped_factory","text":"wrapper function signature:","code":""},{"path":"http://localhost/reference/wrapped_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a wrapped function — wrapped_factory","text":"","code":"wrapped_factory(name, wrapper, ...)"},{"path":"http://localhost/reference/wrapped_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a wrapped function — wrapped_factory","text":"name function name, string wrapper wrapper, function ... (named) parameters execution stack; .e., private wrapper","code":""},{"path":"http://localhost/reference/wrapped_factory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produce a wrapped function — wrapped_factory","text":"function(cmd, args, ..., .name = NULL) ... may, optionally, replaced named parameters. Moreover, point definition, wrapper called wrapped function args: .call(cmd, args)","code":""},{"path":"http://localhost/reference/wrapped_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapped log functions — log_level","title":"wrapped log functions — log_level","text":"functions wrapped versions logger package.","code":""},{"path":"http://localhost/reference/wrapped_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapped log functions — log_level","text":"","code":"log_level(   level,   ...,   namespace = NULL,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_debug(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_error(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_fatal(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_info(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_success(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_trace(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )  log_warn(   ...,   namespace = NA_character_,   .logcall = sys.call(),   .topcall = sys.call(-1),   .topenv = parent.frame() )"},{"path":"http://localhost/reference/wrapped_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wrapped log functions — log_level","text":"level log level, see log_levels details ... R objects can converted character vector via active message formatter function namespace string referring logger environment / config used override target message record used instead default namespace, defined R package name logger called, falls back common, global namespace. .logcall logging call evaluated (useful formatters layouts want access raw, unevaluated R expression) .topcall R expression logging function called (useful formatters layouts extract calling function's name arguments) .topenv original frame .topcall calling function formatter function evaluated used look namespace well via logger:::top_env_name","code":""},{"path":"http://localhost/reference/wrapped_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wrapped log functions — log_level","text":"Invisible list logger objects. See logger details format/","code":""},{"path":[]},{"path":"http://localhost/reference/wrapped_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wrapped log functions — log_level","text":"","code":"if (FALSE) { # \\dontrun{ log_level(INFO, 'hi there') log_info('hi there')  ## output omitted log_debug('hi there')  ## lower threshold and retry log_threshold(TRACE) log_debug('hi there')  ## multiple lines log_info('ok {1:3} + {1:3} = {2*(1:3)}')  log_layout(layout_json()) log_info('ok {1:3} + {1:3} = {2*(1:3)}')  ## note for the JSON output, glue is not automatically applied log_info(glue::glue('ok {1:3} + {1:3} = {2*(1:3)}')) } # }"},{"path":"http://localhost/reference/wrapped_pander.html","id":null,"dir":"Reference","previous_headings":"","what":"wrapped pander functions — pander","title":"wrapped pander functions — pander","text":"functions wrapped versions pander package. allows us inject logging metadata usual code flow.","code":""},{"path":"http://localhost/reference/wrapped_pander.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wrapped pander functions — pander","text":"","code":"pander(x = NULL, ...)  pander_return(...)"},{"path":"http://localhost/reference/wrapped_with_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap a function for logging — wrapped_with_logger","title":"Wrap a function for logging — wrapped_with_logger","text":"Wrap function logging","code":""},{"path":"http://localhost/reference/wrapped_with_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap a function for logging — wrapped_with_logger","text":"","code":"wrapped_with_logger(cmd, args, level = NULL)"},{"path":"http://localhost/reference/wrapped_with_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap a function for logging — wrapped_with_logger","text":"cmd cli function, e.g., cli::cli_alert args args passed cmd via .call level logger level associated cli method","code":""},{"path":"http://localhost/news/index.html","id":"metayer-024","dir":"Changelog","previous_headings":"","what":"metayer 0.2.4","title":"metayer 0.2.4","text":"adding pkgdown support","code":""},{"path":"http://localhost/news/index.html","id":"metayer-023","dir":"Changelog","previous_headings":"","what":"metayer 0.2.3","title":"metayer 0.2.3","text":"adding NEWS.md passes R CMD check","code":""},{"path":"http://localhost/news/index.html","id":"metayer-022","dir":"Changelog","previous_headings":"","what":"metayer 0.2.2","title":"metayer 0.2.2","text":"first “complete” version working first CRAN checks","code":""}]
