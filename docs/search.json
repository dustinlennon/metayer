[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 metayer authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/authoring.html","id":"setting-up-a-jupyter-notebook","dir":"Articles","previous_headings":"","what":"setting up a jupyter notebook","title":"metayer: authoring tools","text":"author documents jupyter lab generate HTML output, use following YAML template. located first cell jupyter document; cell “raw”; tagged “yaml”. tag cell, use menu – view / appearance / show right sidebar. , right sidebar, Common Tools / Cell Tags, enter “yaml” text field button hit return.","code":"--- title: \"metayer: authoring tools\" output: rmarkdown::html_vignette vignette: >   %\\VignetteIndexEntry{metayer: authoring tools}   %\\VignetteEngine{knitr::rmarkdown}   %\\VignetteEncoding{UTF-8} ---"},{"path":"/articles/authoring.html","id":"load-the-metayer-package","dir":"Articles","previous_headings":"setting up a jupyter notebook","what":"load the metayer package","title":"metayer: authoring tools","text":"","code":"suppressMessages({   library(magrittr)   library(metayer) })"},{"path":"/articles/authoring.html","id":"outputting-text","dir":"Articles","previous_headings":"","what":"outputting text","title":"metayer: authoring tools","text":"objects efficiently described using simple text output. across publishing contexts uniform way, use display_text:","code":"# the default list output lst <- list(foo = 42) display_text(lst) $foo [1] 42 # a tibble a <- 1:5 tbl <- tibble::tibble(a, b = a * 2, c = 1) display_text(tbl)  [38;5;246m# A tibble: 5 × 3 [39m       a     b     c    [3m [38;5;246m [39m [23m  [3m [38;5;246m [39m [23m  [3m [38;5;246m [39m [23m  [38;5;250m1 [39m     1     2     1  [38;5;250m2 [39m     2     4     1  [38;5;250m3 [39m     3     6     1  [38;5;250m4 [39m     4     8     1  [38;5;250m5 [39m     5    10     1"},{"path":"/articles/authoring.html","id":"source-highlighting","dir":"Articles","previous_headings":"","what":"source highlighting","title":"metayer: authoring tools","text":"Source highlighting file accomplished display_source: display_source can also take directory path:","code":"display_source(\"./tests/testthat/fixtures/display_source/foo.r\") # # File:  /home/dnlennon/Workspace/repos/metayer/tests/testthat/fixtures/display_source/foo.r #  foo <- function() {} display_source(\"./tests/testthat/fixtures/display_source\") # # File:  /home/dnlennon/Workspace/repos/metayer/tests/testthat/fixtures/display_source/bar.R #  bar <- function() {} # # File:  /home/dnlennon/Workspace/repos/metayer/tests/testthat/fixtures/display_source/foo.r #  foo <- function() {}"},{"path":"/articles/authoring.html","id":"highlight-theme","dir":"Articles","previous_headings":"source highlighting","what":"highlight theme","title":"metayer: authoring tools","text":"Changing knitr theme accomplished providing theme argument. Refer http://animation.r-forge.r-project.org/knitr/ exhaustive list themes.","code":"display_source(\"./tests/testthat/fixtures/display_source/foo.r\", theme = \"pablo\") # # File:  /home/dnlennon/Workspace/repos/metayer/tests/testthat/fixtures/display_source/foo.r #  foo <- function() {}"},{"path":"/articles/authoring.html","id":"programmatically-highlight-code","dir":"Articles","previous_headings":"source highlighting","what":"programmatically highlight code","title":"metayer: authoring tools","text":"’s also possible provide code directly display_source setting raw TRUE:","code":"here::here(\"./tests/testthat/fixtures/display_source/foo.r\") %>%   xfun::file_string() %>%   display_source(raw = TRUE) foo <- function() {}"},{"path":"/articles/authoring.html","id":"building-vignettes","dir":"Articles","previous_headings":"","what":"building vignettes","title":"metayer: authoring tools","text":"Store jupyter notebooks ./vignettes directory. , supposing vignette named “my_vignette.ipynb” exists, creating corresponding vignette simple:","code":"build_vignette( \"my_vignette.ipynb\" )"},{"path":"/articles/cli_logger.html","id":"load-the-metayer-package","dir":"Articles","previous_headings":"","what":"load the metayer package","title":"metayer: folding cli into logger","text":"","code":"suppressMessages({   library(magrittr)   library(logger)   library(metayer) })"},{"path":"/articles/cli_logger.html","id":"logger-basics","dir":"Articles","previous_headings":"","what":"logger basics","title":"metayer: folding cli into logger","text":"logger package documentation https://daroczig.github.io/logger. Logs organized namespace, idea base configuration adapted across new namespaces. makes relatively easy manage multiple streams logs. start, pattern typically: want change layout, say, show namespace: , perhaps want send logs file. can accomplished new, “logfile”, namespace.","code":"log_threshold(INFO) log_appender(appender_stdout) # in jupyter, for example log_info(\"hello world\") ## INFO [2024-08-07 12:45:30] hello world log_layout(   layout_glue_generator(     format = \"{ns} {level} [{format(time, \\\"%Y-%m-%d %H:%M:%S\\\")}] {msg}\"   ) ) log_info(\"a new format, with namespaces\") ## global INFO [2024-08-07 12:45:30] a new format, with namespaces tmp <- tempfile()  log_appender(     appender_file(tmp),     namespace = \"logfile\" ) log_info(\"to the filesystem\", namespace = \"logfile\")  # read from the temporary file msg <- xfun::read_utf8(tmp) cat(msg, \"\\n\") ## logfile INFO [2024-08-07 12:45:30] to the filesystem"},{"path":"/articles/cli_logger.html","id":"cli","dir":"Articles","previous_headings":"","what":"cli","title":"metayer: folding cli into logger","text":"scripts already leverage cli package, metayer provides easy shims redirect cli messages logger. shims use cli.default_handler hook: , However, calling cli_text, wrapped version cli::cli_text produces output two new namespaces: first function metayer package namespace; fact, logged_cli_handler function. second namespace called global.cli indicates cli function called global environment. least ’s ’ll see interpreter. However, authoring context, may see metayer.cli instead. vignette , context, using package namespace.","code":"options(cli.default_handler = logged_cli_handler) logger_reset() log_info(\"hello world\") ## global INFO [2024-08-07 12:45:30] hello world cli_text(\"a cli output\") ## metayer INFO [2024-08-07 12:45:30] adding logger namespace: global.cli ## global.cli INFO [2024-08-07 12:45:30] a cli output"},{"path":"/articles/cli_logger.html","id":"lower-level-logging","dir":"Articles","previous_headings":"cli","what":"lower level logging","title":"metayer: folding cli into logger","text":"Suppose wanted examine lower level logging metayer package. following suffice:","code":"log_threshold(TRACE, namespace = \"metayer\") cli_text(\"a cli output\") ## metayer TRACE [2024-08-07 12:45:30] e988 logged_cli_handler begin ## metayer TRACE [2024-08-07 12:45:30] e988 level = 400; namespace = global.cli; type = text ## metayer TRACE [2024-08-07 12:45:30] e988 handler generated output ## global.cli INFO [2024-08-07 12:45:30] a cli output ## metayer TRACE [2024-08-07 12:45:30] e988 logged_cli_handler end # restore the previous threshold log_threshold(INFO, namespace = \"metayer\")"},{"path":"/articles/cli_logger.html","id":"appendix-wrapping-via-metaprogramming","dir":"Articles","previous_headings":"","what":"appendix: wrapping via metaprogramming","title":"metayer: folding cli into logger","text":"cli function wrapped logic captures conditions sends corresponding condition messages logger machinery. happens cli-wrapped.R source file, scripts automate process. particular, scripts generate entries like following: cli_wrap_safe manages details. wrapping logic lives wrap_cli_body function. interesting ’s called directly via metaprogramming substitution. Compare, example, implementation wrapped cli_text function. Note substitution within conditional block generates outer_cnd. cmd replaced cli::cli_text(..., .envir = .envir).","code":"cli_alert <- cli_wrap_safe(\"cli_alert\", logger::INFO) code <- utils::capture.output(print(wrap_cli_body)) %>%     gsub(\"<environment: .*>\", \"\", .) display_source(     code,     raw = TRUE ) ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:2:0: unexpected end of input ## 1: function (cmd_call, level, .caller_env = caller_env())  ##    ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:2:0: unexpected end of input ## 1: { ##    ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:2:0: unexpected end of input ## 1:     outer_cnd <- catch_cnd({ ##    ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:2:0: unexpected end of input ## 1:         if (\"cmd_call\" %in% names(mc)) { ##    ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:9: unexpected '}' ## 1:         } ##             ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:9: unexpected 'else' ## 1:         else ##             ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:9: unexpected '}' ## 1:         } ##             ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:5: unexpected '}' ## 1:     } ##         ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:2:0: unexpected end of input ## 1:     if (inherits(outer_cnd, \"cli_message\")) { ##    ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:5: unexpected '}' ## 1:     } ##         ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:5: unexpected 'else' ## 1:     else ##         ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:2:0: unexpected end of input ## 1:         cnd <- catch_cnd(cli::cli_verbatim(format(outer_cnd,  ##    ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:30: unexpected ')' ## 1:             backtrace = FALSE) ##                                  ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:5: unexpected '}' ## 1:     } ##         ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:5: unexpected 'else' ## 1:     else ##         ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:5: unexpected '}' ## 1:     } ##         ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:1: unexpected '}' ## 1: } ##     ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used ## Error in parse(text = code, keep.source = FALSE) :  ##   <text>:1:1: unexpected '<' ## 1: < ##     ^ ## Warning in hilight(code, \"html\", ...): the syntax of the source code is ## invalid; the fallback mode is used function (cmd_call, level, .caller_env = caller_env()) { mc <- match.call() .current_env <- current_env() .caller_env <- .current_env$.caller_env %||% caller_env() outer_cnd <- catch_cnd({ if (\"cmd_call\" %in% names(mc)) { eval(.current_env$cmd_call, envir = .current_env) } else { cmd_call } }) if (inherits(outer_cnd, \"cli_message\")) { cnd <- outer_cnd } else if (inherits(outer_cnd, \"condition\")) { cnd <- catch_cnd(cli::cli_verbatim(format(outer_cnd, backtrace = FALSE))) } else { msg <- glue::glue(\"unexpected result: {outer_cnd}\", .null = getOption(\"metayer.cli_null\")) cnd <- error_cnd(message = msg) } wenv <- new_environment(parent = .current_env) %>% env_rename(\"logger_injection\") env_bind(wenv, .log_level = level, .log_namespace = inj_get_namespace(.caller_env)) handler <- getOption(\"cli.default_handler\", metayer_cli_handler) withr::with_environment(wenv, handler(cnd)) cnd_signal(outer_cnd) invisible(NULL) } <bytecode: 0x5c7097253200>  code <- deparse(cli_text) %>% paste0(collapse = \"\\n\") display_source(     code,     raw = TRUE ) function (..., .envir = parent.frame()) {     mc <- match.call()     .current_env <- current_env()     .caller_env <- .current_env$.caller_env %||% caller_env()     outer_cnd <- catch_cnd({         if (\"cmd_call\" %in% names(mc)) {             eval(`$`(.current_env, cli::cli_text(..., .envir = .envir)),                 envir = .current_env)         }         else {             cli::cli_text(..., .envir = .envir)         }     })     if (inherits(outer_cnd, \"cli_message\")) {         cnd <- outer_cnd     }     else if (inherits(outer_cnd, \"condition\")) {         cnd <- catch_cnd(cli::cli_verbatim(format(outer_cnd,             backtrace = FALSE)))     }     else {         msg <- glue::glue(\"unexpected result: {outer_cnd}\", .null = getOption(\"metayer.cli_null\"))         cnd <- error_cnd(message = msg)     }     wenv <- new_environment(parent = .current_env) %>% env_rename(\"logger_injection\")     env_bind(wenv, .log_level = 400L, .log_namespace = inj_get_namespace(.caller_env))     handler <- getOption(\"cli.default_handler\", metayer_cli_handler)     withr::with_environment(wenv, handler(cnd))     cnd_signal(outer_cnd)     invisible(NULL) }"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dustin Lennon. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lennon D (2024). metayer: tooling package development. R package version 0.2.3.","code":"@Manual{,   title = {metayer: tooling for package development},   author = {Dustin Lennon},   year = {2024},   note = {R package version 0.2.3}, }"},{"path":"/index.html","id":"metayer","dir":"","previous_headings":"","what":"tooling for package development","title":"tooling for package development","text":"metayer provides miscellaneous tooling package development. currently offers: vignettes: seamless composing jupyter lab cli + logger: folding existing cli code logger package storage: useful, hierarchical container environments: utility methods inspection","code":""},{"path":"/reference/bang_expr.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse and eval a string — bang_expr","title":"Parse and eval a string — bang_expr","text":"Parse eval string","code":""},{"path":"/reference/bang_expr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse and eval a string — bang_expr","text":"","code":"bang_expr(s, par_env = parent.frame())"},{"path":"/reference/bang_expr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse and eval a string — bang_expr","text":"s string par_env environment evaluate string","code":""},{"path":"/reference/bind_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind an injected function — bind_call","title":"Bind an injected function — bind_call","text":"takes wrappable function like wrap_cli_body returns function partial substitutions.  remaining args wrappable function available returned method.","code":""},{"path":"/reference/bind_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind an injected function — bind_call","text":"","code":"bind_call(ref, cmd_call, ...)"},{"path":"/reference/bind_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind an injected function — bind_call","text":"ref reference function bind cmd_call cmd call ... additional arguments add local environment","code":""},{"path":"/reference/bind_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind an injected function — bind_call","text":"\"partially evaluated\" function","code":""},{"path":"/reference/build_vignette.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a vignette from a jupyter notebook — build_vignette","title":"Build a vignette from a jupyter notebook — build_vignette","text":"Jupyter notebooks stored ./vignettes directory.","code":""},{"path":"/reference/build_vignette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a vignette from a jupyter notebook — build_vignette","text":"","code":"build_vignette(ipynb_name)"},{"path":"/reference/build_vignette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a vignette from a jupyter notebook — build_vignette","text":"ipynb_name ipython notebook name","code":""},{"path":"/reference/captured_cli_opts.html","id":null,"dir":"Reference","previous_headings":"","what":"logger appropriate cli options — captured_cli_opts","title":"logger appropriate cli options — captured_cli_opts","text":"logger appropriate cli options","code":""},{"path":"/reference/captured_cli_opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logger appropriate cli options — captured_cli_opts","text":"","code":"captured_cli_opts()"},{"path":"/reference/captured_cli_opts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logger appropriate cli options — captured_cli_opts","text":"list options","code":""},{"path":"/reference/cli_abort.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_abort — cli_abort","title":"Wrapped version of cli::cli_abort — cli_abort","text":"functions let create error, warning diagnostic messages cli formatting, including inline styling, pluralization glue substitutions.","code":""},{"path":"/reference/cli_abort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_abort — cli_abort","text":"","code":"cli_abort(   message,   ...,   call = .envir,   .envir = parent.frame(),   .frame = .envir )"},{"path":"/reference/cli_abort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_abort — cli_abort","text":"message formatted via call cli_bullets(). ... Passed rlang::abort(), rlang::warn() rlang::inform(). call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages. .envir Environment evaluate glue expressions . .frame throwing context. Used default .trace_bottom, determine internal package mention internal errors .internal TRUE.","code":""},{"path":"/reference/cli_alert.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_alert — cli_alert","title":"Wrapped version of cli::cli_alert — cli_alert","text":"Alerts typically short status messages.","code":""},{"path":"/reference/cli_alert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_alert — cli_alert","text":"","code":"cli_alert(text, id = NULL, class = NULL, wrap = FALSE, .envir = parent.frame())"},{"path":"/reference/cli_alert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_alert — cli_alert","text":"text Text alert. id Id alert element. Can used themes. class Class alert element. Can used themes. wrap Whether auto-wrap text alert. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_alert_danger.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_alert_danger — cli_alert_danger","title":"Wrapped version of cli::cli_alert_danger — cli_alert_danger","text":"Alerts typically short status messages.","code":""},{"path":"/reference/cli_alert_danger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_alert_danger — cli_alert_danger","text":"","code":"cli_alert_danger(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )"},{"path":"/reference/cli_alert_danger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_alert_danger — cli_alert_danger","text":"text Text alert. id Id alert element. Can used themes. class Class alert element. Can used themes. wrap Whether auto-wrap text alert. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_alert_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_alert_info — cli_alert_info","title":"Wrapped version of cli::cli_alert_info — cli_alert_info","text":"Alerts typically short status messages.","code":""},{"path":"/reference/cli_alert_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_alert_info — cli_alert_info","text":"","code":"cli_alert_info(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )"},{"path":"/reference/cli_alert_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_alert_info — cli_alert_info","text":"text Text alert. id Id alert element. Can used themes. class Class alert element. Can used themes. wrap Whether auto-wrap text alert. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_alert_success.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_alert_success — cli_alert_success","title":"Wrapped version of cli::cli_alert_success — cli_alert_success","text":"Alerts typically short status messages.","code":""},{"path":"/reference/cli_alert_success.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_alert_success — cli_alert_success","text":"","code":"cli_alert_success(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )"},{"path":"/reference/cli_alert_success.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_alert_success — cli_alert_success","text":"text Text alert. id Id alert element. Can used themes. class Class alert element. Can used themes. wrap Whether auto-wrap text alert. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_alert_warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_alert_warning — cli_alert_warning","title":"Wrapped version of cli::cli_alert_warning — cli_alert_warning","text":"Alerts typically short status messages.","code":""},{"path":"/reference/cli_alert_warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_alert_warning — cli_alert_warning","text":"","code":"cli_alert_warning(   text,   id = NULL,   class = NULL,   wrap = FALSE,   .envir = parent.frame() )"},{"path":"/reference/cli_alert_warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_alert_warning — cli_alert_warning","text":"text Text alert. id Id alert element. Can used themes. class Class alert element. Can used themes. wrap Whether auto-wrap text alert. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_app_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the default CLI app object — cli_app_factory","title":"Create the default CLI app object — cli_app_factory","text":"Create default CLI app object","code":""},{"path":"/reference/cli_app_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the default CLI app object — cli_app_factory","text":"","code":"cli_app_factory()"},{"path":"/reference/cli_blockquote.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_blockquote — cli_blockquote","title":"Wrapped version of cli::cli_blockquote — cli_blockquote","text":"section quoted another source. typically indented.","code":""},{"path":"/reference/cli_blockquote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_blockquote — cli_blockquote","text":"","code":"cli_blockquote(   quote,   citation = NULL,   id = NULL,   class = NULL,   .envir = parent.frame() )"},{"path":"/reference/cli_blockquote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_blockquote — cli_blockquote","text":"quote Text quotation. citation Source quotation, typically link name person. id Element id, string. NULL, new id generated returned. class Class name, sting. Can used themes. .envir Environment evaluate glue expressions . also used auto-close container .auto_close TRUE.","code":""},{"path":"/reference/cli_bullets.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_bullets — cli_bullets","title":"Wrapped version of cli::cli_bullets — cli_bullets","text":"often useful print list items, tasks function package performs, list notes.","code":""},{"path":"/reference/cli_bullets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_bullets — cli_bullets","text":"","code":"cli_bullets(text, id = NULL, class = NULL, .envir = parent.frame())"},{"path":"/reference/cli_bullets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_bullets — cli_bullets","text":"text Character vector items. See details names interpreted. id Optional id div.bullets element, can used themes. class Optional additional class(es) div.bullets element. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_bullets_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_bullets_raw — cli_bullets_raw","title":"Wrapped version of cli::cli_bullets_raw — cli_bullets_raw","text":"cli_format_bullets_raw() similar cli_bullets(), perform inline styling glue substitutions input.","code":""},{"path":"/reference/cli_bullets_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_bullets_raw — cli_bullets_raw","text":"","code":"cli_bullets_raw(text, id = NULL, class = NULL)"},{"path":"/reference/cli_bullets_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_bullets_raw — cli_bullets_raw","text":"text Character vector items. See details names interpreted. id Optional id div.bullets element, can used themes. class Optional additional class(es) div.bullets element.","code":""},{"path":"/reference/cli_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_code — cli_code","title":"Wrapped version of cli::cli_code — cli_code","text":"helper function creates div class code calls cli_verbatim() output code lines. builtin theme formats containers specially. particular, adds syntax highlighting valid R code.","code":""},{"path":"/reference/cli_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_code — cli_code","text":"","code":"cli_code(   lines = NULL,   ...,   language = \"R\",   .auto_close = TRUE,   .envir = environment() )"},{"path":"/reference/cli_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_code — cli_code","text":"lines Character vector, line line code, newline characters also create new lines. Note glue substitution performed code. ... character vectors, appended lines. language Programming language. also added class, addition code. .auto_close Passed cli_div() creating container code. default code container closed emitting lines ... via cli_verbatim(). can keep container open .auto_close /.envir, calling cli_verbatim() add () code. Note code formatted syntax highlighted separately cli_verbatim() call. .envir Passed cli_div() creating container code.","code":""},{"path":"/reference/cli_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_code — cli_code","text":"id container contains code.","code":""},{"path":"/reference/cli_div.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_div — cli_div","title":"Wrapped version of cli::cli_div — cli_div","text":"See containers. cli_div container special, may add new themes, valid within container.","code":""},{"path":"/reference/cli_div.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_div — cli_div","text":"","code":"cli_div(   id = NULL,   class = NULL,   theme = NULL,   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"/reference/cli_div.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_div — cli_div","text":"id Element id, string. NULL, new id generated returned. class Class name, sting. Can used themes. theme custom theme container. See themes. .auto_close Whether close container, calling function finishes (.envir removed, specified). .envir Environment evaluate glue expressions . also used auto-close container .auto_close TRUE.","code":""},{"path":"/reference/cli_div.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_div — cli_div","text":"id new container element, invisibly.","code":""},{"path":"/reference/cli_dl.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_dl — cli_dl","title":"Wrapped version of cli::cli_dl — cli_dl","text":"definition list container, see containers.","code":""},{"path":"/reference/cli_dl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_dl — cli_dl","text":"","code":"cli_dl(   items = NULL,   labels = names(items),   id = NULL,   class = NULL,   .close = TRUE,   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"/reference/cli_dl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_dl — cli_dl","text":"items Named character vector, NULL. NULL, used list items. labels Item labels. Defaults names items. id Id list container. Can used closing cli_end() themes. NULL, id generated returned invisibly. class Class list container. Can used themes. .close Whether close list container items specified. FALSE new items can added list. .auto_close Whether close container, calling function finishes (.envir removed, specified). .envir Environment evaluate glue expressions . also used auto-close container .auto_close TRUE.","code":""},{"path":"/reference/cli_dl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_dl — cli_dl","text":"id new container element, invisibly.","code":""},{"path":"/reference/cli_end.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_end — cli_end","title":"Wrapped version of cli::cli_end — cli_end","text":"Containers aut0-close default, sometimes need explicitly close . Closing container also closes nested containers.","code":""},{"path":"/reference/cli_end.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_end — cli_end","text":"","code":"cli_end(id = NULL)"},{"path":"/reference/cli_end.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_end — cli_end","text":"id Id container close. missing, current container closed, .","code":""},{"path":"/reference/cli_format.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_format — cli_format","title":"Wrapped version of cli::cli_format — cli_format","text":"function can used directly, via {.val ...} inline style. {.val {expr}} calls cli_format() automatically value expr, styling collapsing .","code":""},{"path":"/reference/cli_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_format — cli_format","text":"","code":"cli_format(x, style = NULL, ...)"},{"path":"/reference/cli_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_format — cli_format","text":"x object format. style List formatting options, see individual methods style options support. ... Additional arguments methods.","code":""},{"path":"/reference/cli_format_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_format_method — cli_format_method","title":"Wrapped version of cli::cli_format_method — cli_format_method","text":"method can typically used format() S3 methods. print() method class can easily defined terms format() method. See examples .","code":""},{"path":"/reference/cli_format_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_format_method — cli_format_method","text":"","code":"cli_format_method(expr, theme = getOption(\"cli.theme\"))"},{"path":"/reference/cli_format_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_format_method — cli_format_method","text":"expr Expression calls cli_* methods, base::cat() base::print() format object's printout. theme Theme use formatting.","code":""},{"path":"/reference/cli_format_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_format_method — cli_format_method","text":"Character vector, one element line printout.","code":""},{"path":"/reference/cli_h1.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_h1 — cli_h1","title":"Wrapped version of cli::cli_h1 — cli_h1","text":"cli three levels headings.","code":""},{"path":"/reference/cli_h1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_h1 — cli_h1","text":"","code":"cli_h1(text, id = NULL, class = NULL, .envir = parent.frame())"},{"path":"/reference/cli_h1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_h1 — cli_h1","text":"text Text heading. can contain inline markup. id Id heading element, string. can used themes. class Class heading element, string. can used themes. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_h2.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_h2 — cli_h2","title":"Wrapped version of cli::cli_h2 — cli_h2","text":"cli three levels headings.","code":""},{"path":"/reference/cli_h2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_h2 — cli_h2","text":"","code":"cli_h2(text, id = NULL, class = NULL, .envir = parent.frame())"},{"path":"/reference/cli_h2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_h2 — cli_h2","text":"text Text heading. can contain inline markup. id Id heading element, string. can used themes. class Class heading element, string. can used themes. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_h3.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_h3 — cli_h3","title":"Wrapped version of cli::cli_h3 — cli_h3","text":"cli three levels headings.","code":""},{"path":"/reference/cli_h3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_h3 — cli_h3","text":"","code":"cli_h3(text, id = NULL, class = NULL, .envir = parent.frame())"},{"path":"/reference/cli_h3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_h3 — cli_h3","text":"text Text heading. can contain inline markup. id Id heading element, string. can used themes. class Class heading element, string. can used themes. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_inform.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_inform — cli_inform","title":"Wrapped version of cli::cli_inform — cli_inform","text":"functions let create error, warning diagnostic messages cli formatting, including inline styling, pluralization glue substitutions.","code":""},{"path":"/reference/cli_inform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_inform — cli_inform","text":"","code":"cli_inform(message, ..., .envir = parent.frame())"},{"path":"/reference/cli_inform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_inform — cli_inform","text":"message formatted via call cli_bullets(). ... Passed rlang::abort(), rlang::warn() rlang::inform(). .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_li.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_li — cli_li","title":"Wrapped version of cli::cli_li — cli_li","text":"list item container, see containers.","code":""},{"path":"/reference/cli_li.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_li — cli_li","text":"","code":"cli_li(   items = NULL,   labels = names(items),   id = NULL,   class = NULL,   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"/reference/cli_li.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_li — cli_li","text":"items Character vector items, NULL. labels definition lists item labels. id Id new container. Can used closing cli_end() themes. NULL, id generated returned invisibly. class Class item container. Can used themes. .auto_close Whether close container, calling function finishes (.envir removed, specified). .envir Environment evaluate glue expressions . also used auto-close container .auto_close TRUE.","code":""},{"path":"/reference/cli_li.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_li — cli_li","text":"id new container element, invisibly.","code":""},{"path":"/reference/cli_list_themes.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_list_themes — cli_list_themes","title":"Wrapped version of cli::cli_list_themes — cli_list_themes","text":"active app, calls start_app().","code":""},{"path":"/reference/cli_list_themes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_list_themes — cli_list_themes","text":"","code":"cli_list_themes()"},{"path":"/reference/cli_list_themes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_list_themes — cli_list_themes","text":"list data frames active themes. data frame row style applies selected CLI tree nodes. data frame columns: selector: original CSS-like selector string. See themes. parsed: parsed selector, used cli matching nodes. style: original style. cnt: id container style currently applied , NA style used.","code":""},{"path":"/reference/cli_ol.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_ol — cli_ol","title":"Wrapped version of cli::cli_ol — cli_ol","text":"ordered list container, see containers.","code":""},{"path":"/reference/cli_ol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_ol — cli_ol","text":"","code":"cli_ol(   items = NULL,   id = NULL,   class = NULL,   .close = TRUE,   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"/reference/cli_ol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_ol — cli_ol","text":"items NULL, character vector. element vector one list item, list container closed default (see .close argument). id Id list container. Can used closing cli_end() themes. NULL, id generated returned invisibly. class Class list container. Can used themes. .close Whether close list container items specified. FALSE new items can added list. .auto_close Whether close container, calling function finishes (.envir removed, specified). .envir Environment evaluate glue expressions . also used auto-close container .auto_close TRUE.","code":""},{"path":"/reference/cli_ol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_ol — cli_ol","text":"id new container element, invisibly.","code":""},{"path":"/reference/cli_output_connection.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_output_connection — cli_output_connection","title":"Wrapped version of cli::cli_output_connection — cli_output_connection","text":"Note refers current R process. output produced another process, relevant.","code":""},{"path":"/reference/cli_output_connection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_output_connection — cli_output_connection","text":"","code":"cli_output_connection()"},{"path":"/reference/cli_output_connection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_output_connection — cli_output_connection","text":"Connection object.","code":""},{"path":"/reference/cli_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_par — cli_par","title":"Wrapped version of cli::cli_par — cli_par","text":"builtin theme leaves empty line paragraphs. See also containers.","code":""},{"path":"/reference/cli_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_par — cli_par","text":"","code":"cli_par(id = NULL, class = NULL, .auto_close = TRUE, .envir = parent.frame())"},{"path":"/reference/cli_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_par — cli_par","text":"id Element id, string. NULL, new id generated returned. class Class name, sting. Can used themes. .auto_close Whether close container, calling function finishes (.envir removed, specified). .envir Environment evaluate glue expressions . also used auto-close container .auto_close TRUE.","code":""},{"path":"/reference/cli_par.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_par — cli_par","text":"id new container element, invisibly.","code":""},{"path":"/reference/cli_process_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_process_done — cli_process_done","title":"Wrapped version of cli::cli_process_done — cli_process_done","text":"cli_process_*() functions superseded cli_progress_message() cli_progress_step() functions, better default behavior. Typically call cli_process_start() start process, cli_process_done() done. error happens cli_process_done() called, cli automatically shows message unsuccessful termination.","code":""},{"path":"/reference/cli_process_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_process_done — cli_process_done","text":"","code":"cli_process_done(   id = NULL,   msg_done = NULL,   .envir = parent.frame(),   done_class = \"alert-success\" )"},{"path":"/reference/cli_process_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_process_done — cli_process_done","text":"id Id status bar container clear. id id current status bar (overwritten another status bar container), status bar cleared. NULL (default) status bar always cleared. msg_done message use successful termination. .envir Environment evaluate glue expressions . also used auto-clear status bar .auto_close TRUE. done_class style class add successful termination message. Use empty string suppress styling.","code":""},{"path":"/reference/cli_process_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_process_done — cli_process_done","text":"Id status bar container.","code":""},{"path":"/reference/cli_process_failed.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_process_failed — cli_process_failed","title":"Wrapped version of cli::cli_process_failed — cli_process_failed","text":"cli_process_*() functions superseded cli_progress_message() cli_progress_step() functions, better default behavior. Typically call cli_process_start() start process, cli_process_done() done. error happens cli_process_done() called, cli automatically shows message unsuccessful termination.","code":""},{"path":"/reference/cli_process_failed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_process_failed — cli_process_failed","text":"","code":"cli_process_failed(   id = NULL,   msg = NULL,   msg_failed = NULL,   .envir = parent.frame(),   failed_class = \"alert-danger\" )"},{"path":"/reference/cli_process_failed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_process_failed — cli_process_failed","text":"id Id status bar container clear. id id current status bar (overwritten another status bar container), status bar cleared. NULL (default) status bar always cleared. msg message show indicate start process computation. collapsed single string, first line kept cut console_width(). msg_failed message use unsuccessful termination. .envir Environment evaluate glue expressions . also used auto-clear status bar .auto_close TRUE. failed_class style class add unsuccessful termination message. Use empty string suppress styling.","code":""},{"path":"/reference/cli_process_failed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_process_failed — cli_process_failed","text":"Id status bar container.","code":""},{"path":"/reference/cli_process_start.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_process_start — cli_process_start","title":"Wrapped version of cli::cli_process_start — cli_process_start","text":"cli_process_*() functions superseded cli_progress_message() cli_progress_step() functions, better default behavior. Typically call cli_process_start() start process, cli_process_done() done. error happens cli_process_done() called, cli automatically shows message unsuccessful termination.","code":""},{"path":"/reference/cli_process_start.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_process_start — cli_process_start","text":"","code":"cli_process_start(   msg,   msg_done = paste(msg, \"... done\"),   msg_failed = paste(msg, \"... failed\"),   on_exit = c(\"auto\", \"failed\", \"done\"),   msg_class = \"alert-info\",   done_class = \"alert-success\",   failed_class = \"alert-danger\",   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"/reference/cli_process_start.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_process_start — cli_process_start","text":"msg message show indicate start process computation. collapsed single string, first line kept cut console_width(). msg_done message use successful termination. msg_failed message use unsuccessful termination. on_exit Whether process fail terminate successfully calling function (environment .envir) exits. msg_class style class add message. Use empty string suppress styling. done_class style class add successful termination message. Use empty string suppress styling.failed_class style class add unsuccessful termination message. Use empty string suppress styling..auto_close Whether clear status bar calling function finishes (.envir removed stack, specified). .envir Environment evaluate glue expressions . also used auto-clear status bar .auto_close TRUE.","code":""},{"path":"/reference/cli_process_start.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_process_start — cli_process_start","text":"Id status bar container.","code":""},{"path":"/reference/cli_progress_along.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_along — cli_progress_along","title":"Wrapped version of cli::cli_progress_along — cli_progress_along","text":"Note function currently experimental! Use cli_progress_along() mapping function loop, add progress bar. uses cli_progress_bar() internally.","code":""},{"path":"/reference/cli_progress_along.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_along — cli_progress_along","text":"","code":"cli_progress_along(   x,   name = NULL,   total = length(x),   ...,   .envir = parent.frame() )"},{"path":"/reference/cli_progress_along.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_along — cli_progress_along","text":"x Sequence add progress bar . name Name progress bar, label, passed cli_progress_bar(). total Passed cli_progress_bar(). ... Passed cli_progress_bar(). .envir Passed cli_progress_bar().","code":""},{"path":"/reference/cli_progress_along.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_along — cli_progress_along","text":"index vector 1 length(x) triggers progress updates iterate .","code":""},{"path":"/reference/cli_progress_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_bar — cli_progress_bar","title":"Wrapped version of cli::cli_progress_bar — cli_progress_bar","text":"reference manual three functions create, update terminate progress bars. tutorial see cli progress bars. cli_progress_bar() creates new progress bar. cli_progress_update() updates state progress bar, potentially display well. cli_progress_done() terminates progress bar.","code":""},{"path":"/reference/cli_progress_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_bar — cli_progress_bar","text":"","code":"cli_progress_bar(   name = NULL,   status = NULL,   type = c(\"iterator\", \"tasks\", \"download\", \"custom\"),   total = NA,   format = NULL,   format_done = NULL,   format_failed = NULL,   clear = getOption(\"cli.progress_clear\", TRUE),   current = TRUE,   auto_terminate = type != \"download\",   extra = NULL,   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"/reference/cli_progress_bar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_bar — cli_progress_bar","text":"name typically used label, short, 20 characters. status New status string progress bar, NULL. type Type progress bar. used select default display format specified. Currently supported types: iterator: e.g. loop mapping function, tasks: (typically small) number tasks, download: download one file, custom: custom type, format must NULL type. total Total number progress units, NA unknown. cli_progress_update() can update total number units. handy know size download beginning, also cases. format set NULL, format (plus format_done format_failed) updated change total NA number. .e. default format strings updated, custom ones . format Format string. specified custom progress bars, otherwise optional, default display selected based progress bat type whether number total units known. Format strings may contain glue substitution, support pluralization cli styling. See progress-variables special variables can use custom format. format_done Format string successful termination. default format. format_failed Format string unsuccessful termination. default format. clear Whether remove progress bar screen terminated. Defaults cli.progress_clear option, TRUE unset. current Whether use progress bar current progress bar calling function. See 'current progress bar' . auto_terminate Whether terminate progress bar number current units reaches number total units. extra Extra data add progress bar. can used custom format strings example. named list. cli_progress_update() can update extra data. Often can get away referring local variables format string, need use argument. Explicitly including constants variables extra can result cleaner code. rare cases need refer progress bar multiple functions, can extra. .auto_close Whether terminate progress bar calling function (one execution environment .envir exits. (Auto termination work progress bars created global environment, e.g. script.) .envir environment use auto-termination glue substitution. also used find set current progress bar.","code":""},{"path":"/reference/cli_progress_bar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_bar — cli_progress_bar","text":"cli_progress_bar() returns id new progress bar. id string constant. cli_progress_update() returns id progress bar, invisibly. cli_progress_done() returns TRUE, invisibly, always.","code":""},{"path":"/reference/cli_progress_builtin_handlers.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_builtin_handlers — cli_progress_builtin_handlers","title":"Wrapped version of cli::cli_progress_builtin_handlers — cli_progress_builtin_handlers","text":"progress handler(s) use can selected global options.","code":""},{"path":"/reference/cli_progress_builtin_handlers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_builtin_handlers — cli_progress_builtin_handlers","text":"","code":"cli_progress_builtin_handlers()"},{"path":"/reference/cli_progress_builtin_handlers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_builtin_handlers — cli_progress_builtin_handlers","text":"cli_progress_builtin_handlers() returns names currently supported progress handlers.","code":""},{"path":"/reference/cli_progress_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_cleanup — cli_progress_cleanup","title":"Wrapped version of cli::cli_progress_cleanup — cli_progress_cleanup","text":"Progress bar utility functions.","code":""},{"path":"/reference/cli_progress_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_cleanup — cli_progress_cleanup","text":"","code":"cli_progress_cleanup()"},{"path":"/reference/cli_progress_cleanup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_cleanup — cli_progress_cleanup","text":"cli_progress_num() returns integer scalar. `cli_progress_cleanup() return anything.","code":""},{"path":"/reference/cli_progress_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_demo — cli_progress_demo","title":"Wrapped version of cli::cli_progress_demo — cli_progress_demo","text":"Useful experimenting format strings documentation. creates progress bar, iterates terminates saves progress updates.","code":""},{"path":"/reference/cli_progress_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_demo — cli_progress_demo","text":"","code":"cli_progress_demo(   name = NULL,   status = NULL,   type = c(\"iterator\", \"tasks\", \"download\", \"custom\"),   total = NA,   .envir = parent.frame(),   ...,   at = if (is_interactive()) NULL else 50,   show_after = 0,   live = NULL,   delay = 0,   start = as.difftime(5, units = \"secs\") )"},{"path":"/reference/cli_progress_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_demo — cli_progress_demo","text":"name Passed cli_progress_bar(). status Passed cli_progress_bar(). type Passed cli_progress_bar(). total Passed cli_progress_bar(). .envir Passed cli_progress_bar(). ... Passed cli_progress_bar(). number progress units show capture progress bar . NULL, sequence states generated show progress beginning end. show_after Delay show progress bar. Overrides cli.progress_show_after option. live Whether show progress bat screen, just return recorded updates. Defaults value cli.progress_demo_live options. unset, TRUE interactive sessions. delay Delay progress bar updates. start Time subtract start time, simulate progress bar takes longer run.","code":""},{"path":"/reference/cli_progress_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_demo — cli_progress_demo","text":"List class cli_progress_demo, print format method pretty printing. lines entry contains output lines, corresponding one update.","code":""},{"path":"/reference/cli_progress_done.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_done — cli_progress_done","title":"Wrapped version of cli::cli_progress_done — cli_progress_done","text":"reference manual three functions create, update terminate progress bars. tutorial see cli progress bars. cli_progress_bar() creates new progress bar. cli_progress_update() updates state progress bar, potentially display well. cli_progress_done() terminates progress bar.","code":""},{"path":"/reference/cli_progress_done.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_done — cli_progress_done","text":"","code":"cli_progress_done(id = NULL, .envir = parent.frame(), result = \"done\")"},{"path":"/reference/cli_progress_done.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_done — cli_progress_done","text":"id Progress bar update terminate. NULL, current progress bar calling function (.envir specified) updated terminated. .envir environment use auto-termination glue substitution. also used find set current progress bar. result String select successful unsuccessful termination. used progress bar cleared screen. can one \"done\", \"failed\", \"clear\", \"auto\".","code":""},{"path":"/reference/cli_progress_done.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_done — cli_progress_done","text":"cli_progress_bar() returns id new progress bar. id string constant. cli_progress_update() returns id progress bar, invisibly. cli_progress_done() returns TRUE, invisibly, always.","code":""},{"path":"/reference/cli_progress_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_message — cli_progress_message","title":"Wrapped version of cli::cli_progress_message — cli_progress_message","text":"simplified progress bar, single (dynamic) message, without progress units.","code":""},{"path":"/reference/cli_progress_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_message — cli_progress_message","text":"","code":"cli_progress_message(   msg,   current = TRUE,   .auto_close = TRUE,   .envir = parent.frame(),   ... )"},{"path":"/reference/cli_progress_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_message — cli_progress_message","text":"msg Message show. may contain glue substitution cli styling. can updated via cli_progress_update(), usual. current Passed cli_progress_bar(). .auto_close Passed cli_progress_bar(). .envir Passed cli_progress_bar(). ... Passed cli_progress_bar().","code":""},{"path":"/reference/cli_progress_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_message — cli_progress_message","text":"id new progress bar.","code":""},{"path":"/reference/cli_progress_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_num — cli_progress_num","title":"Wrapped version of cli::cli_progress_num — cli_progress_num","text":"Progress bar utility functions.","code":""},{"path":"/reference/cli_progress_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_num — cli_progress_num","text":"","code":"cli_progress_num()"},{"path":"/reference/cli_progress_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_num — cli_progress_num","text":"cli_progress_num() returns integer scalar. `cli_progress_cleanup() return anything.","code":""},{"path":"/reference/cli_progress_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_output — cli_progress_output","title":"Wrapped version of cli::cli_progress_output — cli_progress_output","text":"text calculated via cli_text(), cli features can used , including progress variables.","code":""},{"path":"/reference/cli_progress_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_output — cli_progress_output","text":"","code":"cli_progress_output(text, id = NULL, .envir = parent.frame())"},{"path":"/reference/cli_progress_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_output — cli_progress_output","text":"text Text output. formatted via cli_text(). id Progress bar id. default current progress bar. .envir Environment use glue interpolation text.","code":""},{"path":"/reference/cli_progress_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_output — cli_progress_output","text":"TRUE, always.","code":""},{"path":"/reference/cli_progress_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_step — cli_progress_step","title":"Wrapped version of cli::cli_progress_step — cli_progress_step","text":"simplified progress bar, single (dynamic) message, without progress units.","code":""},{"path":"/reference/cli_progress_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_step — cli_progress_step","text":"","code":"cli_progress_step(   msg,   msg_done = msg,   msg_failed = msg,   spinner = FALSE,   class = if (!spinner) \".alert-info\",   current = TRUE,   .auto_close = TRUE,   .envir = parent.frame(),   ... )"},{"path":"/reference/cli_progress_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_step — cli_progress_step","text":"msg Message show. may contain glue substitution cli styling. can updated via cli_progress_update(), usual. style cli info alert (see cli_alert_info()). msg_done Message show successful termination. default msg styled cli success alert (see cli_alert_success()). msg_failed Message show unsuccessful termination. default msg styled cli danger alert (see cli_alert_danger()). spinner Whether show spinner beginning line. make spinner spin, need call cli_progress_update() regularly. class cli class add message. default class steps spinner. current Passed cli_progress_bar(). .auto_close Passed cli_progress_bar(). .envir Passed cli_progress_bar(). ... Passed cli_progress_bar().","code":""},{"path":"/reference/cli_progress_styles.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_styles — cli_progress_styles","title":"Wrapped version of cli::cli_progress_styles — cli_progress_styles","text":"following options used select style: cli_progress_bar_style cli_progress_bar_style_ascii cli_progress_bar_style_unicode","code":""},{"path":"/reference/cli_progress_styles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_styles — cli_progress_styles","text":"","code":"cli_progress_styles()"},{"path":"/reference/cli_progress_styles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_styles — cli_progress_styles","text":"named list sublists containing elements complete, incomplete potentially current.","code":""},{"path":"/reference/cli_progress_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_progress_update — cli_progress_update","title":"Wrapped version of cli::cli_progress_update — cli_progress_update","text":"reference manual three functions create, update terminate progress bars. tutorial see cli progress bars. cli_progress_bar() creates new progress bar. cli_progress_update() updates state progress bar, potentially display well. cli_progress_done() terminates progress bar.","code":""},{"path":"/reference/cli_progress_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_progress_update — cli_progress_update","text":"","code":"cli_progress_update(   inc = NULL,   set = NULL,   total = NULL,   status = NULL,   extra = NULL,   id = NULL,   force = FALSE,   .envir = parent.frame() )"},{"path":"/reference/cli_progress_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_progress_update — cli_progress_update","text":"inc Increment progress units. ignored set NULL. set Set current number progress units value. Ignored NULL. total Total number progress units, NA unknown. cli_progress_update() can update total number units. handy know size download beginning, also cases. format set NULL, format (plus format_done format_failed) updated change total NA number. .e. default format strings updated, custom ones . status New status string progress bar, NULL. extra Extra data add progress bar. can used custom format strings example. named list. cli_progress_update() can update extra data. Often can get away referring local variables format string, need use argument. Explicitly including constants variables extra can result cleaner code. rare cases need refer progress bar multiple functions, can extra. id Progress bar update terminate. NULL, current progress bar calling function (.envir specified) updated terminated. force Whether force display update, even update due. .envir environment use auto-termination glue substitution. also used find set current progress bar.","code":""},{"path":"/reference/cli_progress_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_progress_update — cli_progress_update","text":"cli_progress_bar() returns id new progress bar. id string constant. cli_progress_update() returns id progress bar, invisibly. cli_progress_done() returns TRUE, invisibly, always.","code":""},{"path":"/reference/cli_rule.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_rule — cli_rule","title":"Wrapped version of cli::cli_rule — cli_rule","text":"can used separate parts output.","code":""},{"path":"/reference/cli_rule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_rule — cli_rule","text":"","code":"cli_rule(   left = \"\",   center = \"\",   right = \"\",   id = NULL,   .envir = parent.frame() )"},{"path":"/reference/cli_rule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_rule — cli_rule","text":"left Label show left. interferes center label, one can present. center Label show center. interferes  left right labels. right Label show right. interferes center label, one can present. id Element id, string. NULL, new id generated returned. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_sitrep — cli_sitrep","title":"Wrapped version of cli::cli_sitrep — cli_sitrep","text":"Contains currently: cli_unicode_option: whether cli.unicode option set value. See is_utf8_output(). symbol_charset: selected character set symbol, UTF-8, Windows, ASCII. console_utf8: whether console supports UTF-8. See base::l10n_info(). latex_active: whether inside knitr, creating LaTeX document. num_colors: number ANSI colors. See num_ansi_colors(). console_with: detected console width.","code":""},{"path":"/reference/cli_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_sitrep — cli_sitrep","text":"","code":"cli_sitrep()"},{"path":"/reference/cli_sitrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_sitrep — cli_sitrep","text":"Named list entries listed . cli_sitrep class, print() format() method.","code":""},{"path":"/reference/cli_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_status — cli_status","title":"Wrapped version of cli::cli_status — cli_status","text":"cli_status_*() functions superseded cli_progress_message() cli_progress_step() functions, better default behavior. status bar last line terminal. cli apps can use show status information, progress bars, etc. status bar kept intact semantic cli output.","code":""},{"path":"/reference/cli_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_status — cli_status","text":"","code":"cli_status(   msg,   msg_done = paste(msg, \"... done\"),   msg_failed = paste(msg, \"... failed\"),   .keep = FALSE,   .auto_close = TRUE,   .envir = parent.frame(),   .auto_result = c(\"clear\", \"done\", \"failed\", \"auto\") )"},{"path":"/reference/cli_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_status — cli_status","text":"msg text show, character vector. collapsed single string, first line kept cut console_width(). message often associated start calculation. msg_done message use message cleared, calculation finishes successfully. .auto_close TRUE .auto_result \"done\", printed automatically calling function (.envir) finishes. msg_failed message use message cleared, calculation finishes unsuccessfully. .auto_close TRUE .auto_result \"failed\", printed automatically calling function (.envir) finishes. .keep status bar cleared. TRUE content status bar kept, regular cli output (screen scrolled needed). FALSE, status bar deleted. .auto_close Whether clear status bar calling function finishes (.envir removed stack, specified). .envir Environment evaluate glue expressions . also used auto-clear status bar .auto_close TRUE. .auto_result auto-closing status bar.","code":""},{"path":"/reference/cli_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_status — cli_status","text":"id new status bar container element, invisibly.","code":""},{"path":"/reference/cli_status_clear.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_status_clear — cli_status_clear","title":"Wrapped version of cli::cli_status_clear — cli_status_clear","text":"cli_status_*() functions superseded cli_progress_message() cli_progress_step() functions, better default behavior. Clear status bar","code":""},{"path":"/reference/cli_status_clear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_status_clear — cli_status_clear","text":"","code":"cli_status_clear(   id = NULL,   result = c(\"clear\", \"done\", \"failed\"),   msg_done = NULL,   msg_failed = NULL,   .envir = parent.frame() )"},{"path":"/reference/cli_status_clear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_status_clear — cli_status_clear","text":"id Id status bar container clear. id id current status bar (overwritten another status bar container), status bar cleared. NULL (default) status bar always cleared. result Whether show message success failure just clear status bar. msg_done NULL, message use successful process termination. overrides message given status bar created. msg_failed NULL, message use failed process termination. overrides message give status bar created. .envir Environment evaluate glue expressions . also used auto-clear status bar .auto_close TRUE.","code":""},{"path":"/reference/cli_status_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_status_update — cli_status_update","title":"Wrapped version of cli::cli_status_update — cli_status_update","text":"cli_status_*() functions superseded cli_progress_message() cli_progress_step() functions, better default behavior. Update status bar","code":""},{"path":"/reference/cli_status_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_status_update — cli_status_update","text":"","code":"cli_status_update(   id = NULL,   msg = NULL,   msg_done = NULL,   msg_failed = NULL,   .envir = parent.frame() )"},{"path":"/reference/cli_status_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_status_update — cli_status_update","text":"id Id status bar update. Defaults current status bar container. msg Text update status bar . NULL want change . msg_done Updated \"done\" message. NULL want change . msg_failed Updated \"failed\" message. NULL want change . .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_status_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_status_update — cli_status_update","text":"Id status bar container.","code":""},{"path":"/reference/cli_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_text — cli_text","title":"Wrapped version of cli::cli_text — cli_text","text":"Write text screen. function appropriate longer paragraphs. See cli_alert() shorter status messages.","code":""},{"path":"/reference/cli_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_text — cli_text","text":"","code":"cli_text(..., .envir = parent.frame())"},{"path":"/reference/cli_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_text — cli_text","text":"... text show, character vectors. concatenated single string. Newlines preserved. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_tick_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_tick_reset — cli_tick_reset","title":"Wrapped version of cli::cli_tick_reset — cli_tick_reset","text":"reference manual three functions create, update terminate progress bars. tutorial see cli progress bars. cli_progress_bar() creates new progress bar. cli_progress_update() updates state progress bar, potentially display well. cli_progress_done() terminates progress bar.","code":""},{"path":"/reference/cli_tick_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_tick_reset — cli_tick_reset","text":"","code":"cli_tick_reset()"},{"path":"/reference/cli_tick_reset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_tick_reset — cli_tick_reset","text":"cli_progress_bar() returns id new progress bar. id string constant. cli_progress_update() returns id progress bar, invisibly. cli_progress_done() returns TRUE, invisibly, always.","code":""},{"path":"/reference/cli_ul.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_ul — cli_ul","title":"Wrapped version of cli::cli_ul — cli_ul","text":"unordered list container, see containers.","code":""},{"path":"/reference/cli_ul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_ul — cli_ul","text":"","code":"cli_ul(   items = NULL,   id = NULL,   class = NULL,   .close = TRUE,   .auto_close = TRUE,   .envir = parent.frame() )"},{"path":"/reference/cli_ul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_ul — cli_ul","text":"items NULL, character vector. element vector one list item, list container closed default (see .close argument). id Id list container. Can used closing cli_end() themes. NULL, id generated returned invisibly. class Class list container. Can used themes. .close Whether close list container items specified. FALSE new items can added list. .auto_close Whether close container, calling function finishes (.envir removed, specified). .envir Environment evaluate glue expressions . also used auto-close container .auto_close TRUE.","code":""},{"path":"/reference/cli_ul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapped version of cli::cli_ul — cli_ul","text":"id new container element, invisibly.","code":""},{"path":"/reference/cli_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_vec — cli_vec","title":"Wrapped version of cli::cli_vec — cli_vec","text":"Add custom cli style vector","code":""},{"path":"/reference/cli_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_vec — cli_vec","text":"","code":"cli_vec(x, style = list())"},{"path":"/reference/cli_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_vec — cli_vec","text":"x Vector collapsed cli. style Style apply vector. used theme span element created vector. can set vec-sep vec-last modify separator last separator.","code":""},{"path":"/reference/cli_verbatim.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_verbatim — cli_verbatim","title":"Wrapped version of cli::cli_verbatim — cli_verbatim","text":"wrapped, printed . Long lines overflow. glue substitution performed verbatim text.","code":""},{"path":"/reference/cli_verbatim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_verbatim — cli_verbatim","text":"","code":"cli_verbatim(..., .envir = parent.frame())"},{"path":"/reference/cli_verbatim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_verbatim — cli_verbatim","text":"... text show, character vectors. element printed new line. .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_warn.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapped version of cli::cli_warn — cli_warn","title":"Wrapped version of cli::cli_warn — cli_warn","text":"functions let create error, warning diagnostic messages cli formatting, including inline styling, pluralization glue substitutions.","code":""},{"path":"/reference/cli_warn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapped version of cli::cli_warn — cli_warn","text":"","code":"cli_warn(message, ..., .envir = parent.frame())"},{"path":"/reference/cli_warn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapped version of cli::cli_warn — cli_warn","text":"message formatted via call cli_bullets(). ... Passed rlang::abort(), rlang::warn() rlang::inform(). .envir Environment evaluate glue expressions .","code":""},{"path":"/reference/cli_wrap_safe.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap an exported function, safely — cli_wrap_safe","title":"Wrap an exported function, safely — cli_wrap_safe","text":"Wrap exported function, safely","code":""},{"path":"/reference/cli_wrap_safe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap an exported function, safely — cli_wrap_safe","text":"","code":"cli_wrap_safe(name, level)"},{"path":"/reference/cli_wrap_safe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap an exported function, safely — cli_wrap_safe","text":"name object (function) name level logger level","code":""},{"path":"/reference/cli_wrap_safe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap an exported function, safely — cli_wrap_safe","text":"wrapped function","code":""},{"path":"/reference/construct_rmd_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: construct an R markdown file — construct_rmd_file","title":"Internal: construct an R markdown file — construct_rmd_file","text":"Internal:  construct R markdown file","code":""},{"path":"/reference/construct_rmd_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: construct an R markdown file — construct_rmd_file","text":"","code":"construct_rmd_file(cfg, content, rmd_pth)"},{"path":"/reference/construct_rmd_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: construct an R markdown file — construct_rmd_file","text":"cfg config content json extracted content jupyter notebook rmd_pth r markdown path","code":""},{"path":"/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise an error for deprecated functions — deprecated","title":"Raise an error for deprecated functions — deprecated","text":"Raise error deprecated functions","code":""},{"path":"/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise an error for deprecated functions — deprecated","text":"","code":"deprecated(is_terminal = TRUE)"},{"path":"/reference/deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise an error for deprecated functions — deprecated","text":"is_terminal TRUE, abort; FALSE, warn","code":""},{"path":"/reference/display_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight a source file or the source files in a directory — display_source","title":"Highlight a source file or the source files in a directory — display_source","text":"Highlight source file source files directory","code":""},{"path":"/reference/display_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight a source file or the source files in a directory — display_source","text":"","code":"display_source(path, theme = \"seashell\", raw = FALSE)"},{"path":"/reference/display_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight a source file or the source files in a directory — display_source","text":"path path theme knitr theme raw TRUE, 'path' interpreted lines code","code":""},{"path":"/reference/display_text.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"\".character\", applied uniformly across context","code":""},{"path":"/reference/display_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"display_text(obj)"},{"path":"/reference/display_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"","text":"obj R object","code":""},{"path":"/reference/env_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename an environment — env_rename","title":"Rename an environment — env_rename","text":"Rename environment","code":""},{"path":"/reference/env_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename an environment — env_rename","text":"","code":"env_rename(e, name, envir = parent.frame())"},{"path":"/reference/env_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename an environment — env_rename","text":"e environment name new name, passed str_glue envir environment pass str_glue","code":""},{"path":"/reference/env_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename an environment — env_rename","text":"environment 'name' attribute set","code":""},{"path":"/reference/env_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the environment stack — env_stack","title":"Return the environment stack — env_stack","text":"Utility function wraps env_parents.  However, always includes current environment handle function environments.","code":""},{"path":"/reference/env_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the environment stack — env_stack","text":"","code":"env_stack(e, last = getOption(\"pkgette.env_stack_last\"))"},{"path":"/reference/env_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the environment stack — env_stack","text":"e environment; function last passed underlying call env_parents","code":""},{"path":"/reference/env_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the environment stack — env_stack","text":"list environments","code":""},{"path":"/reference/extract_jpy_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: extract jupyter notebook cells — extract_jpy_cells","title":"Internal: extract jupyter notebook cells — extract_jpy_cells","text":"Internal:  extract jupyter notebook cells","code":""},{"path":"/reference/extract_jpy_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: extract jupyter notebook cells — extract_jpy_cells","text":"","code":"extract_jpy_cells(content)"},{"path":"/reference/extract_jpy_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: extract jupyter notebook cells — extract_jpy_cells","text":"content json extracted content jupyter notebook","code":""},{"path":"/reference/extract_yaml_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: extract tagged yaml cells from ipython notebook — extract_yaml_cells","title":"Internal: extract tagged yaml cells from ipython notebook — extract_yaml_cells","text":"Internal:  extract tagged yaml cells ipython notebook","code":""},{"path":"/reference/extract_yaml_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: extract tagged yaml cells from ipython notebook — extract_yaml_cells","text":"","code":"extract_yaml_cells(content)"},{"path":"/reference/extract_yaml_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: extract tagged yaml cells from ipython notebook — extract_yaml_cells","text":"content json extracted content jupyter notebook","code":""},{"path":"/reference/extract_yaml_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal: extract tagged yaml cells from ipython notebook — extract_yaml_cells","text":"coalesced YAML \"yaml\" tagged cells","code":""},{"path":"/reference/get_cmd_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Programmatically construct an external call — get_cmd_call","title":"Programmatically construct an external call — get_cmd_call","text":"Programmatically construct external call","code":""},{"path":"/reference/get_cmd_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Programmatically construct an external call — get_cmd_call","text":"","code":"get_cmd_call(pkg, name, func = NULL)"},{"path":"/reference/get_cmd_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Programmatically construct an external call — get_cmd_call","text":"pkg package name, e.g., \"cli\" name function package, e.g., \"cli_text\" func function, available","code":""},{"path":"/reference/get_cmd_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Programmatically construct an external call — get_cmd_call","text":"call contains requested command args","code":""},{"path":"/reference/get_fileset.html","id":null,"dir":"Reference","previous_headings":"","what":"Get fileset from a file name or directory — get_fileset","title":"Get fileset from a file name or directory — get_fileset","text":"Get fileset file name directory","code":""},{"path":"/reference/get_fileset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get fileset from a file name or directory — get_fileset","text":"","code":"get_fileset(path)"},{"path":"/reference/get_fileset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get fileset from a file name or directory — get_fileset","text":"path file path, directory path; relative, assummed wrt package root","code":""},{"path":"/reference/hash_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim a hash value — hash_trim","title":"Trim a hash value — hash_trim","text":"Set \"hash_label_length\" option change default (identity)","code":""},{"path":"/reference/hash_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim a hash value — hash_trim","text":"","code":"hash_trim(val)"},{"path":"/reference/hash_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim a hash value — hash_trim","text":"val (hash) value trim","code":""},{"path":"/reference/highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"A refactored / shared code highlight function — highlight","title":"A refactored / shared code highlight function — highlight","text":"refactored / shared code highlight function","code":""},{"path":"/reference/highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A refactored / shared code highlight function — highlight","text":"","code":"highlight(code, theme)"},{"path":"/reference/highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A refactored / shared code highlight function — highlight","text":"code code, read source file theme knitr theme","code":""},{"path":"/reference/highlight_code_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble codes to be highlighted — highlight_code_method","title":"Assemble codes to be highlighted — highlight_code_method","text":"Assemble codes highlighted","code":""},{"path":"/reference/highlight_code_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble codes to be highlighted — highlight_code_method","text":"","code":"highlight_code_method(args, method = c(\"fileset\", \"raw\"))"},{"path":"/reference/highlight_code_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble codes to be highlighted — highlight_code_method","text":"args fileset; raw source code method either \"fileset\" \"raw\"","code":""},{"path":"/reference/highlight_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight R source files and inject HTML into document — highlight_source","title":"Highlight R source files and inject HTML into document — highlight_source","text":"Highlight R source files inject HTML document","code":""},{"path":"/reference/highlight_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight R source files and inject HTML into document — highlight_source","text":"","code":"highlight_source(args, theme = \"seashell\", method = c(\"fileset\", \"raw\"))"},{"path":"/reference/highlight_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight R source files and inject HTML into document — highlight_source","text":"args depends method theme knitr css theme method method use","code":""},{"path":"/reference/initialize_vignette.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize for common vignette settings — initialize_vignette","title":"Initialize for common vignette settings — initialize_vignette","text":"Called onLoad","code":""},{"path":"/reference/initialize_vignette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize for common vignette settings — initialize_vignette","text":"","code":"initialize_vignette()"},{"path":"/reference/inj_get_namespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Get runtime injections — inj_get_namespace","title":"Get runtime injections — inj_get_namespace","text":"Get runtime injections","code":""},{"path":"/reference/inj_get_namespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get runtime injections — inj_get_namespace","text":"","code":"inj_get_namespace(.caller_env)"},{"path":"/reference/inj_get_namespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get runtime injections — inj_get_namespace","text":".caller_env caller environment","code":""},{"path":"/reference/inj_get_namespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get runtime injections — inj_get_namespace","text":"namespace","code":""},{"path":"/reference/is_header_cell.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: is the cell tagged as ","title":"Internal: is the cell tagged as ","text":"Internal: cell tagged \"yaml\"","code":""},{"path":"/reference/is_header_cell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: is the cell tagged as ","text":"","code":"is_header_cell(c)"},{"path":"/reference/is_header_cell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: is the cell tagged as ","text":"c cell test","code":""},{"path":"/reference/is_shimmed.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect devtools shims — is_shimmed","title":"Detect devtools shims — is_shimmed","text":"Detect devtools shims","code":""},{"path":"/reference/is_shimmed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect devtools shims — is_shimmed","text":"","code":"is_shimmed()"},{"path":"/reference/is_shimmed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect devtools shims — is_shimmed","text":"TRUE shimmed; else, FALSE","code":""},{"path":"/reference/knitr_css.parser.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function — knitr_css.parser","title":"Internal function — knitr_css.parser","text":"Internal function","code":""},{"path":"/reference/knitr_css.parser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function — knitr_css.parser","text":"","code":"knitr_css.parser(...)"},{"path":"/reference/knitr_css.parser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function — knitr_css.parser","text":"... passed css.parser","code":""},{"path":"/reference/list_coalesce.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: coalesce lists — list_coalesce","title":"Internal: coalesce lists — list_coalesce","text":"Internal: coalesce lists","code":""},{"path":"/reference/list_coalesce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: coalesce lists — list_coalesce","text":"","code":"list_coalesce(agg, y)"},{"path":"/reference/list_coalesce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: coalesce lists — list_coalesce","text":"agg base case list y new list coalesce base case list","code":""},{"path":"/reference/list_coalesce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal: coalesce lists — list_coalesce","text":"coalesced list","code":""},{"path":"/reference/logged_cli_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Redirect CLI messages to logger — logged_cli_handler","title":"Redirect CLI messages to logger — logged_cli_handler","text":"Redirect CLI messages logger","code":""},{"path":"/reference/logged_cli_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redirect CLI messages to logger — logged_cli_handler","text":"","code":"logged_cli_handler(msg)"},{"path":"/reference/logged_cli_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redirect CLI messages to logger — logged_cli_handler","text":"msg cli_message","code":""},{"path":"/reference/logger_reset.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset the logger logs — logger_reset","title":"Reset the logger logs — logger_reset","text":"Warning / Experimental:  accesses private data logger package undocumented way","code":""},{"path":"/reference/logger_reset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset the logger logs — logger_reset","text":"","code":"logger_reset()"},{"path":"/reference/metayer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"metayer: Tooling for package development — metayer-package","title":"metayer: Tooling for package development — metayer-package","text":"metayer provides miscellaneous tooling package development. currently enhances vignettes written jupyter lab; allows folding cli code logger; adds hierarchical storage environment; provides utility methods working environments.","code":""},{"path":"/reference/metayer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"metayer: Tooling for package development — metayer-package","text":"Maintainer: Dustin Lennon dustin.lennon@gmail.com (ORCID)","code":""},{"path":"/reference/metayer_cli_handler.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle CLI messages — metayer_cli_handler","title":"Handle CLI messages — metayer_cli_handler","text":"Handle CLI messages","code":""},{"path":"/reference/metayer_cli_handler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle CLI messages — metayer_cli_handler","text":"","code":"metayer_cli_handler(msg)"},{"path":"/reference/metayer_cli_handler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle CLI messages — metayer_cli_handler","text":"msg cli_message","code":""},{"path":"/reference/not_yet_implemented.html","id":null,"dir":"Reference","previous_headings":"","what":"Raise an error for not yet implemented functions — not_yet_implemented","title":"Raise an error for not yet implemented functions — not_yet_implemented","text":"Raise error yet implemented functions","code":""},{"path":"/reference/not_yet_implemented.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raise an error for not yet implemented functions — not_yet_implemented","text":"","code":"not_yet_implemented(is_terminal = TRUE)"},{"path":"/reference/not_yet_implemented.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raise an error for not yet implemented functions — not_yet_implemented","text":"is_terminal TRUE, abort; FALSE, warn","code":""},{"path":"/reference/preprocess_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess a message — preprocess_msg","title":"Preprocess a message — preprocess_msg","text":"Change NULL values, metayer.cli_null option set","code":""},{"path":"/reference/preprocess_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess a message — preprocess_msg","text":"","code":"preprocess_msg(msg)"},{"path":"/reference/preprocess_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess a message — preprocess_msg","text":"msg cli message","code":""},{"path":"/reference/preprocess_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess a message — preprocess_msg","text":"message type","code":""},{"path":"/reference/publish_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Output the html in the correct publishing context — publish_context","title":"Output the html in the correct publishing context — publish_context","text":"Output html correct publishing context","code":""},{"path":"/reference/publish_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output the html in the correct publishing context — publish_context","text":"","code":"publish_context(html)"},{"path":"/reference/publish_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output the html in the correct publishing context — publish_context","text":"html html publish","code":""},{"path":"/reference/render_rmd_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: render an HTML from R markdown file — render_rmd_file","title":"Internal: render an HTML from R markdown file — render_rmd_file","text":"Internal:  render HTML R markdown file","code":""},{"path":"/reference/render_rmd_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: render an HTML from R markdown file — render_rmd_file","text":"","code":"render_rmd_file(rmd_pth)"},{"path":"/reference/render_rmd_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal: render an HTML from R markdown file — render_rmd_file","text":"rmd_pth rmd file name","code":""},{"path":"/reference/rm.all.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function that resets the global environment. — rm.all","title":"Utility function that resets the global environment. — rm.all","text":"Utility function resets global environment.","code":""},{"path":"/reference/rm.all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function that resets the global environment. — rm.all","text":"","code":"rm.all(exclusions = c())"},{"path":"/reference/rm.all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function that resets the global environment. — rm.all","text":"exclusions list object names excluded removal.","code":""},{"path":"/reference/source_footer_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: a template for source files — source_footer_template","title":"Internal: a template for source files — source_footer_template","text":"Internal: template source files","code":""},{"path":"/reference/source_footer_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: a template for source files — source_footer_template","text":"","code":"source_footer_template()"},{"path":"/reference/source_header_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal: a template for source files — source_header_template","title":"Internal: a template for source files — source_header_template","text":"Internal: template source files","code":""},{"path":"/reference/source_header_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal: a template for source files — source_header_template","text":"","code":"source_header_template()"},{"path":"/reference/storage_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a storage environment — storage_env","title":"Retrieve a storage environment — storage_env","text":"Retrieve storage environment","code":""},{"path":"/reference/storage_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a storage environment — storage_env","text":"","code":"storage_env(..., .store = \".storage\", .envir = rlang::global_env())"},{"path":"/reference/storage_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a storage environment — storage_env","text":"... indexing collection character objects .store name storage .envir environment bind storage data structure","code":""},{"path":"/reference/storage_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a storage environment — storage_env","text":"specified environment","code":""},{"path":"/reference/storage_purge.html","id":null,"dir":"Reference","previous_headings":"","what":"Purge the storage — storage_purge","title":"Purge the storage — storage_purge","text":"Purge storage","code":""},{"path":"/reference/storage_purge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Purge the storage — storage_purge","text":"","code":"storage_purge(.store = \".storage\", .envir = rlang::global_env())"},{"path":"/reference/storage_purge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Purge the storage — storage_purge","text":".store name storage .envir environment purge storage_env data structure","code":""},{"path":"/reference/test_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"A less motivational test — test_filter","title":"A less motivational test — test_filter","text":"less motivational test","code":""},{"path":"/reference/test_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A less motivational test — test_filter","text":"","code":"test_filter(test_name)"},{"path":"/reference/test_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A less motivational test — test_filter","text":"test_name canonical stub name, e.g., 'logger'","code":""},{"path":"/reference/test_sanitize.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic test sanitation — test_sanitize","title":"Basic test sanitation — test_sanitize","text":": calls devtools::load_all testing resets loggers purges storage calls rm.noted exclusions sets deferred storage purge exit","code":""},{"path":"/reference/test_sanitize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic test sanitation — test_sanitize","text":"","code":"test_sanitize(exclusions = c(), envir = parent.frame())"},{"path":"/reference/test_sanitize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic test sanitation — test_sanitize","text":"exclusions list object names exclude rm.envir local environment","code":""},{"path":"/reference/with_message_buf.html","id":null,"dir":"Reference","previous_headings":"","what":"Capture messages in a bytestream — with_message_buf","title":"Capture messages in a bytestream — with_message_buf","text":"Capture messages bytestream","code":""},{"path":"/reference/with_message_buf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capture messages in a bytestream — with_message_buf","text":"","code":"with_message_buf(code, nbytes = 1000, strip_newline = TRUE)"},{"path":"/reference/with_message_buf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capture messages in a bytestream — with_message_buf","text":"code client code execute nbytes size bytearray strip_newline TRUE, remove single trailing newline","code":""},{"path":"/reference/with_message_buf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capture messages in a bytestream — with_message_buf","text":"captured output","code":""},{"path":"/reference/wrap_cli_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Cli wrapper logic — wrap_cli_body","title":"Cli wrapper logic — wrap_cli_body","text":"wrap_factory uses body function building block.  using 'substitute', replacing cmd level parameters known expressions.","code":""},{"path":"/reference/wrap_cli_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cli wrapper logic — wrap_cli_body","text":"","code":"wrap_cli_body(cmd_call, level, .caller_env = caller_env())"},{"path":"/reference/wrap_cli_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cli wrapper logic — wrap_cli_body","text":"cmd_call call, cli operation wrapping level logger level associated cmd .caller_env caller environment evaluate cmd_call","code":""},{"path":"/reference/wrap_cli_body.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cli wrapper logic — wrap_cli_body","text":"Note, awkward substitute construction: local_env <- new_environment(list(cmd = cmd)) injection <- lapply( body(wrap_cli_body), function(s) .call(substitute, list(s, local_env)) ) %>% .call()","code":""},{"path":"/reference/wrap_factory.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap an exported function — wrap_factory","title":"Wrap an exported function — wrap_factory","text":"Wrap exported function","code":""},{"path":"/reference/wrap_factory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap an exported function — wrap_factory","text":"","code":"wrap_factory(ref, pkg, name, level)"},{"path":"/reference/wrap_factory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap an exported function — wrap_factory","text":"ref reference function pkg package name name object (function) name level logger level","code":""},{"path":"/reference/wrap_factory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap an exported function — wrap_factory","text":"wrapped function","code":""},{"path":"/news/index.html","id":"metayer-024","dir":"Changelog","previous_headings":"","what":"metayer 0.2.4","title":"metayer 0.2.4","text":"adding pkgdown support","code":""},{"path":"/news/index.html","id":"metayer-023","dir":"Changelog","previous_headings":"","what":"metayer 0.2.3","title":"metayer 0.2.3","text":"adding NEWS.md passes R CMD check","code":""},{"path":"/news/index.html","id":"metayer-022","dir":"Changelog","previous_headings":"","what":"metayer 0.2.2","title":"metayer 0.2.2","text":"first “complete” version working first CRAN checks","code":""}]
